.nlist
;****************************************************************************
;
; Include This File To Define The AT89LP213/214/216 SFRs
;
;	!!! NOTE !!!
;		Only SFR Registers And
;		Bit Addressable Register Bits Are Defined
;
;****************************************************************************
;
	; Set UPPER_CASE_SFR Non Zero To Define Upper Case SFRs
	; Set LOWER_CASE_SFR Non Zero To Define Lower Case SFRs
	; Else Both Upper And Lower Case SFRs Will Be Defined

	.ifeq	UPPER_CASE_SFR + LOWER_CASE_SFR
		UPPER_CASE_SFR = 1
		LOWER_CASE_SFR = 1
	.endif

;
;****************************************************************************
;
	; Macro To Define Bit Addressable SFRs By Bit Number
        ; Creates Symbols str.0 = addr+0, str.1 = addr+1, ... , str.7 = addr+7
	.macro	.sfr.n	addr, str
	  .ifnb	str
	    .irpc c ^/01234567/
	str'.'c =: addr + c
	    .endm
	  .endif
	.endm

;
;****************************************************************************
;
	; Macro To Define SFR Bit Names
	; Creates Symbols str0 = addr+0, str1 = addr+1, ..., str7 = addr+7
	.macro	.sfr.b	addr, str0, str1, str2, str3, str4, str5, str6, str7
	  sfr$n =: 0
	  .irp	str, str0, str1, str2, str3, str4, str5, str6, str7
	    .ifnb str
	str =: addr + sfr$n
	    .endif
	    sfr$n = sfr$n + 1
	  .endm
	.endm

;
;****************************************************************************
;
	; Macro To Define SFRs By Register Names
	; Creates Symbols str0 = addr+0, str1 = addr+1, ..., str7 = addr+7
	.macro	.sfr.r	addr, str0, str1, str2, str3, str4, str5, str6, str7
	  sfr$n =: 0
	  .ifndef sfr$'addr
	    sfr$'addr =: 0
	  .endif
	  .irp	str, str0, str1, str2, str3, str4, str5, str6, str7
	    .ifnb str
	str =: addr + sfr$n
	sfr$'addr = sfr$'addr | (1 << sfr$n)
	    .endif
	    sfr$n = sfr$n + 1
	  .endm
	.endm

;
;****************************************************************************

.ifne	UPPER_CASE_SFR
	.list	(!,src)
;	AT89LP213/214/216 Upper Case SFRs         Defined
	.nlist

.sfr.n	0x80,	P0
.sfr.r	0x80,	P0,	SP,	DP0L,	DP0H,	,	,	,	PCON
.sfr.r	0x80,	,	,	DPL,	DPH	,	,	,
.sfr.r	0x80,	,	,	DPTRL,	DPTRH	,	,	,

.sfr.n	0x88,	TCON
.sfr.b	0x88,	IT0,	IE0,	IT1,	IE1,	TR0,	TF0,	TR1,	TF1
.sfr.r	0x88,	TCON,	TMOD,	TL0,	TL1,	TH0,	TH1,	,	CLKREG

.sfr.n	0x90	P1
.sfr.b	0x90	GPI0,	GPI1,	GPI2,	GPI3,	GPI4,	GPI5,	GPI6,	GPI7
.sfr.b	0x90	AIN0,	AIN1,	,	,	SS$,	MOSI,	MISO,	SCK
.sfr.r	0x90	P1,	TCONB,	RL0,	RL1,	RH0,	RH1,	,	ACSR

.sfr.n	0x98,	SCON
.sfr.b	0x98,	RI,	TI,	RB8,	TB8,	REN,	SM2,	SM1,	SM0
.sfr.r	0x98,	SCON,	SBUF,	GPMOD,	GPLS,	GPIEN,	GPIF,	,	

.sfr.r	0xA0,	,	,	AUXR1,	,	,	,	WDTRST,	WDTCON

.sfr.n	0xA8,	IE
.sfr.b	0xA8,	EX0,	ET0,	EX1,	ET1,	ES,	EGP,	EC,	EA
.sfr.r	0xA8	IE,	SADDR,	,	,	,	,	,

.sfr.n	0xB0	P3
.sfr.b	0xB0	RXD,	TXD,	INT0$,	INT1$,	T0,	T1,	CMPOUT,
.sfr.b	0xB0	,	,	,	CLKOUT,	,	,	,
.sfr.r	0xB0	P3,	,	,	,	,	,	,	IPH

.sfr.n	0xB8	IP
.sfr.b	0xB8	PX0,	PT0,	PX1,	PT1,	PS,	PGB,	,
.sfr.r	0xB8	IP,	SADEN,	,	,	,	,	,

.sfr.r	0xC0	,	,	P1M0,	P1M1,	,	,	P3M0,	P3M1

;.sfr.r	0xC8

.sfr.n	0xD0,	PSW
.sfr.b	0xD0,	P,	,	OV,	RS0,	RS1,	F0,	AC,	CY
.sfr.r	0xD0,	PSW,	,	,	,	,	,	,

;.sfr.r	0xD8

.sfr.n	0xE0,	A
.sfr.n	0xE0,	ACC
.sfr.r	0xE0,	ACC,	,	,	,	,	,	,

.sfr.n	0xE8,	SPSR
.sfr.b	0xE8,	ENH,	DISSO,	SSIG,	,	,	LDEN,	WCOL,	SPIF
.sfr.r	0xE8,	SPSR,	SPCR,	SPDR,	,	,	,	,

.sfr.n	0xF0,	B
.sfr.r	0xF0,	B,	,	,	,	,	,	,

.sfr.n	0xF8,
.sfr.r	0xF8,	,	,	,	,	,	,	,

;
;	The macro .sfr.r also creates the definition sfr$'addr
;	that has a bit set for each SFR that is defined.  After
;	processing the complete SFR table there will be 16
;	definitions:
;
;	sfr$0x80	sfr$0x88	sfr$0x90	sfr$0x98
;	sfr$0xA0	sfr$0xA8	sfr$0xB0	sfr$0xB8
;	sfr$0xC0	sfr$0xC8	sfr$0xD0	sfr$0xD8
;	sfr$0xE0	sfr$0xE8	sfr$0xF0	sfr$0xF8
;

.endif

.ifne	LOWER_CASE_SFR
	.list	(!,src)
;	AT89LP213/214/216 Lower Case SFRs         Defined
	.nlist

.sfr.n	0x80,	p0
.sfr.r	0x80,	p0,	sp,	dp0l,	dp0h,	,	,	,	pcon
.sfr.r	0x80,	,	,	dpl,	dph	,	,	,
.sfr.r	0x80,	,	,	dptrl,	dptrh	,	,	,

.sfr.n	0x88,	tcon
.sfr.b	0x88,	it0,	ie0,	it1,	ie1,	tr0,	tf0,	tr1,	tf1
.sfr.r	0x88,	tcon,	tmod,	tl0,	tl1,	th0,	th1,	,	clkreg

.sfr.n	0x90	p1
.sfr.b	0x90	gpi0,	gpi1,	gpi2,	gpi3,	gpi4,	gpi5,	gpi6,	gpi7
.sfr.b	0x90	ain0,	ain1,	,	,	ss$,	mosi,	miso,	sck
.sfr.r	0x90	p1,	tconb,	rl0,	rl1,	rh0,	rh1,	,	acsr

.sfr.n	0x98,	scon
.sfr.b	0x98,	ri,	ti,	rb8,	tb8,	ren,	sm2,	sm1,	sm0
.sfr.r	0x98,	scon,	sbuf,	gpmod,	gpls,	gpien,	gpif,	,	

.sfr.r	0xa0,	,	,	auxr1,	,	,	,	wdtrst,	wdtcon

.sfr.n	0xa8,	ie
.sfr.b	0xa8,	ex0,	et0,	ex1,	et1,	es,	egp,	ec,	ea
.sfr.r	0xa8	ie,	saddr,	,	,	,	,	,

.sfr.n	0xb0	p3
.sfr.b	0xb0	rxd,	txd,	int0$,	int1$,	t0,	t1,	cmpout,
.sfr.b	0xb0	,	,	,	clkout,	,	,	,
.sfr.r	0xb0	p3,	,	,	,	,	,	,	iph

.sfr.n	0xb8	ip
.sfr.b	0xb8	px0,	pt0,	px1,	pt1,	ps,	pgb,	,
.sfr.r	0xb8	ip,	saden,	,	,	,	,	,

.sfr.r	0xc0	,	,	p1m0,	p1m1,	,	,	p3m0,	p3m1

;.sfr.r	0xc8

.sfr.n	0xd0,	psw
.sfr.b	0xd0,	p,	,	ov,	rs0,	rs1,	f0,	ac,	cy
.sfr.r	0xd0,	psw,	,	,	,	,	,	,

;.sfr.r	0xd8

.sfr.n	0xe0,	a
.sfr.n	0xe0,	acc
.sfr.r	0xe0,	acc,	,	,	,	,	,	,

.sfr.n	0xe8,	spsr
.sfr.b	0xe8,	enh,	disso,	ssig,	,	,	lden,	wcol,	spif
.sfr.r	0xe8,	spsr,	spcr,	spdr,	,	,	,	,

.sfr.n	0xf0,	b
.sfr.r	0xf0,	b,	,	,	,	,	,	,

.sfr.n	0xf8,
.sfr.r	0xf8,	,	,	,	,	,	,	,

;
;	The macro .sfr.r also creates the definition sfr$'addr
;	that has a bit set for each SFR that is defined.  After
;	processing the complete SFR table there will be 16
;	definitions:
;
;	sfr$0x80	sfr$0x88	sfr$0x90	sfr$0x98
;	sfr$0xa0	sfr$0xa8	sfr$0xb0	sfr$0xb8
;	sfr$0xc0	sfr$0xc8	sfr$0xd0	sfr$0xd8
;	sfr$0xe0	sfr$0xe8	sfr$0xf0	sfr$0xf8
;

.endif

