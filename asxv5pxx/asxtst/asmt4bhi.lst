ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                        Page 1
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
HILO Ordering

                                      1 	.sbttl	HILO Ordering
                                      2 
                                      3 	.hilo				; HILO Ordering
                                      4 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                        Page 2
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
32-Bit Addressing

                                      1 	.sbttl	32-Bit Addressing
                                      2 
                                      3 	.32bit				; 32-bit addressing
                                      4 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                        Page 3
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
32-Bit Addressing

                                      1 	.title	Machine Independent Assembler Test
                                      2 	.module Asmtst
                                      3 
                                      4 	;  The file 'asmt4blo.asm' must be assembled with
                                      5 	; a LO/HI assembler (in file ___ext.c, hilo = 0).
                                      6 	;
                                      7 	;  The file 'asmt4bhi.asm' must be assembled with
                                      8 	; a HI/LO assembler (in file ___ext.c, hilo = 1).
                                      9 	;
                                     10 	;	asmt:
                                     11 	;		4	4-byte PC addressing
                                     12 	;		b	1 byte data addressing
                                     13 	;		lo	LO/HI assembler
                                     14 	;		hi	HI/LO assembler
                                     15 	;
                                     16 	; All .areas must be of type DSEG.
                                     17 
                                     18 	.sbttl	Memory Allocation Directives
                                     19 
                                     20 	.area	_DATA	(abs,ovr)        ; Data Area
                                     21 
                                     22 	.radix	O			; set default to octal
                                     23 
                                     24 					; binary constants
    00000000 C0                      25 	.byte	0b11000000		; C0
    00000001 0E                      26 	.byte	0B1110			; 0E
    00000002 C0                      27 	.byte	$%11000000		; C0
                                     28 
                                     29 					; octal constants
    00000003 14                      30 	.byte	24			; 14
    00000004 14                      31 	.byte	024			; 14
    00000005 14                      32 	.byte	0q024			; 14
    00000006 14                      33 	.byte	0Q024			; 14
    00000007 14                      34 	.byte	0o024			; 14
    00000008 14                      35 	.byte	0O024			; 14
    00000009 14                      36 	.byte	$&24			; 14
                                     37 
                                     38 					; decimal constant
    0000000A 18                      39 	.byte	0d024			; 18
    0000000B 18                      40 	.byte	0D024			; 18
    0000000C 18                      41 	.byte	$#24			; 18
                                     42 
                                     43 					; hexidecimal constants
    0000000D 24                      44 	.byte	0h024			; 24
    0000000E 24                      45 	.byte	0H024			; 24
    0000000F 24                      46 	.byte	0x024			; 24
    00000010 24                      47 	.byte	0X024			; 24
    00000011 24                      48 	.byte	$@24			; 24
                                     49 
    00000012 00                      50 	.db	0			; 00
    00000013 00 00                   51 	.dw	0			; 00 00
                                     52 
                                     53 	.radix	D			; set default to decimal
                                     54 
    00000015 01 02 03                55 	.byte	1,2,3			; 01 02 03
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                        Page 4
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Memory Allocation Directives

    00000018 04 05 06                56 	.byte	4,5,6			; 04 05 06
    0000001B 07 08 09                57 	.byte	7,8,9			; 07 08 09
    0000001E 00 01 00 02 00 03       58 	.word	1,2,3			; 00 01 00 02 00 03
    00000024 00 04 00 05 00 06       59 	.word	4,5,6			; 00 04 00 05 00 06
    0000002A 00 07 00 08 00 09       60 	.word	7,8,9			; 00 07 00 08 00 09
                                     61 
    00000030                         62 	.blkb	16
    00000040                         63 	.ds	16
                                     64 
    00000050                         65 	.blkw	16
    00000070                         66 	.ds	16*2
                                     67 
    00000090s00r92                   68 word:	.word	.+2			;s00r92
    00000092s00r90                   69 	.word	.-2			;s00r90
    00000094s00r96                   70 	.word	2+.			;s00r96
    00000096 00 04                   71 	.word	.-(word+2)		; 00 04
                                     72 
    00000098S00R00s00r9B             73 byte4:	.4byte	.+3			;S00R00s00r9B
    0000009CS00R00s00r99             74 	.4byte	.-3			;S00R00s00r99
    000000A0S00R00s00rA3             75 	.4byte	3+.			;S00R00s00rA3
    000000A4 00 00 00 0A             76 	.4byte	.-(byte4+2)		; 00 00 00 0A
                                     77 
                                     78 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                        Page 5
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Boundary Directives

                                     80 	.sbttl	Boundary Directives
                                     81 
                                     82 	.area	bndry_1	(ABS,OVR,DSEG)
    00000000                         83 	.org	0
    00000000                         84 bndry_1:
                                     85 
    00000000                         86 	.even
    00000000 00                      87 1$:	.byte	1$ - bndry_1		; 00
    00000002                         88 	.even
    00000002 02                      89 2$:	.byte	2$ - bndry_1		; 02
    00000004                         90 	.even
    00000005                         91 	.odd
    00000005 05                      92 3$:	.byte	3$ - bndry_1		; 05
    00000007                         93 	.odd
    00000007 07                      94 4$:	.byte	4$ - bndry_1		; 07
    00000009                         95 	.odd
    0000000A                         96 	.even
    0000000A 00 0A                   97 5$:	.word	5$ - bndry_1		; 00 0A
    0000000D                         98 	.odd
    0000000D 00 0D                   99 6$:	.word	6$ - bndry_1		; 00 0D
    00000010                        100 	.even
    00000010 00 10                  101 7$:	.word	7$ - bndry_1		; 00 10
                                    102 
                                    103 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                        Page 6
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Power of 2 Boundary Modes

                                    105 	.sbttl	Power of 2 Boundary Modes
                                    106 
                                    107 	.area	bndry_2	(ABS,OVR,DSEG)
    00000000                        108 	.org	0
                                    109 
    00000000                        110 	.even			; Address == 0
    00000000                        111 	.bndry	2		; Address == 0
    00000000                        112 	.bndry	4		; Address == 0
    00000000                        113 	.bndry	8		; Address == 0
    00000000                        114 	.bndry	16		; Address == 0
    00000000                        115 	.bndry	32		; Address == 0
    00000000                        116 	.bndry	64		; Address == 0
    00000000                        117 	.bndry	128		; Address == 0
    00000000                        118 	.bndry	256		; Address == 0
    00000000                        119 	.bndry	512		; Address == 0
    00000000                        120 	.bndry	1024		; Address == 0
                                    121 
    00000000                        122 	.org	0
    00000000                        123 bndry_2:
                                    124 
    00000000                        125 	.org	0
    00000000                        126 	.even			; Address == 0
    00000000 00 00                  127 1$:	.word	1$ - bndry_2	; 00 00
                                    128 
    00000000                        129 	.org	0
    00000000                        130 	.bndry	2		; Address == 0
    00000000 00 00                  131 2$:	.word	2$ - bndry_2	; 00 00
                                    132 
    00000000                        133 	.org	0
    00000000                        134 	.bndry	4		; Address == 0
    00000000 00 00                  135 3$:	.word	3$ - bndry_2	; 00 00
                                    136 
    00000000                        137 	.org	0
    00000000                        138 	.bndry	8		; Address == 0
    00000000 00 00                  139 4$:	.word	4$ - bndry_2	; 00 00
                                    140 
    00000000                        141 	.org	0
    00000000                        142 	.bndry	16		; Address == 0
    00000000 00 00                  143 5$:	.word	5$ - bndry_2	; 00 00
                                    144 
    00000000                        145 	.org	0
    00000000                        146 	.bndry	32		; Address == 0
    00000000 00 00                  147 6$:	.word	6$ - bndry_2	; 00 00
                                    148 
    00000000                        149 	.org	0
    00000000                        150 	.bndry	64		; Address == 0
    00000000 00 00                  151 7$:	.word	7$ - bndry_2	; 00 00
                                    152 
    00000000                        153 	.org	0
    00000000                        154 	.bndry	128		; Address == 0
    00000000 00 00                  155 8$:	.word	8$ - bndry_2	; 00 00
                                    156 
    00000000                        157 	.org	0
    00000000                        158 	.bndry	256		; Address == 0
    00000000 00 00                  159 9$:	.word	9$ - bndry_2	; 00 00
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                        Page 7
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Power of 2 Boundary Modes

                                    160 
    00000000                        161 	.org	0
    00000000                        162 	.bndry	512		; Address == 0
    00000000 00 00                  163 10$:	.word	10$ - bndry_2	; 00 00
                                    164 
    00000000                        165 	.org	0
    00000000                        166 	.bndry	1024		; Address == 0
    00000000 00 00                  167 11$:	.word	11$ - bndry_2	; 00 00
                                    168 
                                    169 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                        Page 8
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Power of 2 Boundary Modes

                                    171 
                                    172 	.area	bndry_3	(ABS,OVR,DSEG)
    00000001                        173 	.org	1
                                    174 
    00000002                        175 	.even			; Address == 2
    00000002                        176 	.bndry	2		; Address == 2
    00000004                        177 	.bndry	4		; Address == 4
    00000008                        178 	.bndry	8		; Address == 8
    00000010                        179 	.bndry	16		; Address == 16
    00000020                        180 	.bndry	32		; Address == 32
    00000040                        181 	.bndry	64		; Address == 64
    00000080                        182 	.bndry	128		; Address == 128
    00000100                        183 	.bndry	256		; Address == 256
    00000200                        184 	.bndry	512		; Address == 512
    00000400                        185 	.bndry	1024		; Address == 1024
                                    186 
    00000000                        187 	.org	0
    00000000                        188 bndry_3:
                                    189 
    00000001                        190 	.org	1
    00000002                        191 	.even			; Address == 2
    00000002 00 02                  192 1$:	.word	1$ - bndry_3	; 00 02
                                    193 
    00000001                        194 	.org	1
    00000002                        195 	.bndry	2		; Address == 2
    00000002 00 02                  196 2$:	.word	2$ - bndry_3	; 00 02
                                    197 
    00000001                        198 	.org	1
    00000004                        199 	.bndry	4		; Address == 4
    00000004 00 04                  200 3$:	.word	3$ - bndry_3	; 00 04
                                    201 
    00000001                        202 	.org	1
    00000008                        203 	.bndry	8		; Address == 8
    00000008 00 08                  204 4$:	.word	4$ - bndry_3	; 00 08
                                    205 
    00000001                        206 	.org	1
    00000010                        207 	.bndry	16		; Address == 16
    00000010 00 10                  208 5$:	.word	5$ - bndry_3	; 00 10
                                    209 
    00000001                        210 	.org	1
    00000020                        211 	.bndry	32		; Address == 32
    00000020 00 20                  212 6$:	.word	6$ - bndry_3	; 00 20
                                    213 
    00000001                        214 	.org	1
    00000040                        215 	.bndry	64		; Address == 64
    00000040 00 40                  216 7$:	.word	7$ - bndry_3	; 00 40
                                    217 
    00000001                        218 	.org	1
    00000080                        219 	.bndry	128		; Address == 128
    00000080 00 80                  220 8$:	.word	8$ - bndry_3	; 00 80
                                    221 
    00000001                        222 	.org	1
    00000100                        223 	.bndry	256		; Address == 256
    00000100 01 00                  224 9$:	.word	9$ - bndry_3	; 01 00
                                    225 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                        Page 9
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Power of 2 Boundary Modes

    00000001                        226 	.org	1
    00000200                        227 	.bndry	512		; Address == 512
    00000200 02 00                  228 10$:	.word	10$ - bndry_3	; 02 00
                                    229 
    00000001                        230 	.org	1
    00000400                        231 	.bndry	1024		; Address == 1024
    00000400 04 00                  232 11$:	.word	11$ - bndry_3	; 04 00
                                    233 
                                    234 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 10
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Non Power of 2 Boundary Modes

                                    236 	.sbttl	Non Power of 2 Boundary Modes
                                    237 
                                    238 	.area	bndry_4	(ABS,OVR,DSEG)
    00000000                        239 	.org	0
                                    240 
    00000000                        241 	.bndry	1		; Address == 0
    00000000                        242 	.bndry	3		; Address == 0
    00000000                        243 	.bndry	7		; Address == 0
    00000000                        244 	.bndry	15		; Address == 0
    00000000                        245 	.bndry	31		; Address == 0
                                    246 
    00000000                        247  	.org	0
    00000000                        248 bndry_4:
                                    249 
    00000000                        250 	.org	0
    00000000                        251 	.bndry	1		; Address == 0
    00000000 00 00                  252 1$:	.word	1$ - bndry_4	; 00 00
                                    253 
    00000000                        254 	.org	0
    00000000                        255 	.bndry	3		; Address == 0
    00000000 00 00                  256 2$:	.word	2$ - bndry_4	; 00 00
                                    257 
    00000000                        258 	.org	0
    00000000                        259 	.bndry	7		; Address == 0
    00000000 00 00                  260 3$:	.word	3$ - bndry_4	; 00 00
                                    261 
    00000000                        262 	.org	0
    00000000                        263 	.bndry	15		; Address == 0
    00000000 00 00                  264 4$:	.word	4$ - bndry_4	; 00 00
                                    265 
    00000000                        266 	.org	0
    00000000                        267 	.bndry	31		; Address == 0
    00000000 00 00                  268 5$:	.word	5$ - bndry_4	; 00 00
                                    269 
                                    270 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 11
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Non Power of 2 Boundary Modes

                                    272 
                                    273 	.area	bndry_5	(ABS,OVR,DSEG)
    00000001                        274 	.org	1
                                    275 
    00000003                        276 	.bndry	3		; Address == 3
    00000005                        277 	.bndry	5		; Address == 5
    00000009                        278 	.bndry	9		; Address == 9
    00000011                        279 	.bndry	17		; Address == 17
    00000021                        280 	.bndry	33		; Address == 33
                                    281 
    00000000                        282 	.org	0
    00000000                        283 bndry_5:
                                    284 
    00000001                        285 	.org	1
    00000003                        286 	.bndry	3		; Address == 3
    00000003 00 03                  287 1$:	.word	1$ - bndry_5	; 00 03
                                    288 
    00000001                        289 	.org	1
    00000005                        290 	.bndry	5		; Address == 5
    00000005 00 05                  291 2$:	.word	2$ - bndry_5	; 00 05
                                    292 
    00000001                        293 	.org	1
    00000009                        294 	.bndry	9		; Address == 9
    00000009 00 09                  295 3$:	.word	3$ - bndry_5	; 00 09
                                    296 
    00000001                        297 	.org	1
    00000011                        298 	.bndry	17		; Address == 17
    00000011 00 11                  299 4$:	.word	4$ - bndry_5	; 00 11
                                    300 
    00000001                        301 	.org	1
    00000021                        302 	.bndry	33		; Address == 33
    00000021 00 21                  303 5$:	.word	5$ - bndry_5	; 00 21
                                    304 
                                    305 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 12
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Non Power of 2 Boundary Modes

                                    307 
                                    308 	.area	bndry_6	(ABS,OVR,DSEG)
    0000002F                        309 	.org	47
                                    310 
    00000030                        311 	.bndry	3		; Address == 48
    00000030                        312 	.bndry	6		; Address == 48
    00000030                        313 	.bndry	12		; Address == 48
    00000030                        314 	.bndry	24		; Address == 48
    00000030                        315 	.bndry	48		; Address == 48
    00000060                        316 	.bndry	96		; Address == 96
    000000C0                        317 	.bndry	192		; Address == 192
    00000180                        318 	.bndry	384		; Address == 384
    00000300                        319 	.bndry	768		; Address == 768
    00000600                        320 	.bndry	1536		; Address == 1536
                                    321 
    00000000                        322 	.org	0
    00000000                        323 bndry_6:
                                    324 
    0000002F                        325 	.org	47
    00000030                        326 	.bndry	3		; Address == 48
    00000030 00 30                  327 1$:	.word	1$ - bndry_6	; 00 30
                                    328 
    0000002F                        329 	.org	47
    00000030                        330 	.bndry	6		; Address == 48
    00000030 00 30                  331 2$:	.word	2$ - bndry_6	; 00 30
                                    332 
    0000002F                        333 	.org	47
    00000030                        334 	.bndry	12		; Address == 48
    00000030 00 30                  335 3$:	.word	3$ - bndry_6	; 00 30
                                    336 
    0000002F                        337 	.org	47
    00000030                        338 	.bndry	24		; Address == 48
    00000030 00 30                  339 4$:	.word	4$ - bndry_6	; 00 30
                                    340 
    0000002F                        341 	.org	47
    00000030                        342 	.bndry	48		; Address == 48
    00000030 00 30                  343 5$:	.word	5$ - bndry_6	; 00 30
                                    344 
    0000002F                        345 	.org	47
    00000060                        346 	.bndry	96		; Address == 96
    00000060 00 60                  347 6$:	.word	6$ - bndry_6	; 00 60
                                    348 
    0000002F                        349 	.org	47
    000000C0                        350 	.bndry	192		; Address == 192
    000000C0 00 C0                  351 7$:	.word	7$ - bndry_6	; 00 C0
                                    352 
    0000002F                        353 	.org	47
    00000180                        354 	.bndry	384		; Address == 384
    00000180 01 80                  355 8$:	.word	8$ - bndry_6	; 01 80
                                    356 
    0000002F                        357 	.org	47
    00000300                        358 	.bndry	768		; Address == 768
    00000300 03 00                  359 9$:	.word	9$ - bndry_6	; 03 00
                                    360 
    0000002F                        361 	.org	47
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 13
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Non Power of 2 Boundary Modes

    00000600                        362 	.bndry	1536		; Address == 1536
    00000600 06 00                  363 10$:	.word	10$ - bndry_6	; 06 00
                                    364 
                                    365 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 14
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
String Directives

                                    367 	.sbttl	String Directives
                                    368 
                                    369 	.area	_DATA			; Data Area
                                    370 
    000000A8 61 62 63 64 65         371 	.ascii	"abcde"			; 61 62 63 64 65
    000000AD 61 62 63 64 65 00      372 	.asciz	"abcde"			; 61 62 63 64 65 00
    000000B3 61 62 63 64 E5         373 	.ascis	"abcde"			; 61 62 63 64 E5
                                    374 
    000000B8 61 0D 62 0A            375 	.ascii	/a/(13)/b/(10)		; 61 0D 62 0A
    000000BC 61 0D 62 0A 00         376 	.asciz	/a/(13)/b/(10)		; 61 0D 62 0A 00
    000000C1 61 0D 62 8A            377 	.ascis	/a/(13)/b/(10)		; 61 0D 62 8A
                                    378 
    000000C5 0D 61                  379 	.ascii	(13)/a/			; 0D 61
    000000C7 0D 61 00               380 	.asciz	(13)/a/			; 0D 61 00
    000000CA 0D E1                  381 	.ascis	(13)/a/			; 0D E1
                                    382 
                                    383 
                                    384 	.sbttl	Expression Evaluation
                                    385 
                         00000000   386 	n0x00	=	0x00
                         00000001   387 	n0x01	=	0x01
                         00000010   388 	n0x10	=	0x10
                         000000FF   389 	n0xff	=	0xff
                         0000EEFF   390 	n0xeeff =	0xeeff
                                    391 
                         000000FF   392 	n =	< n0xeeff		; 0xff		low byte
    000000CC 00 FF                  393 	.byte	>n,<n			; 00 FF
                         000000EE   394 	n =	> n0xeeff		; 0xee		high byte
    000000CE 00 EE                  395 	.byte	>n,<n			; 00 EE
                                    396 
                                    397 
                         00000041   398 	n =	'A			; 0x41		single character
    000000D0 00 41                  399 	.byte	>n,<n			; 00 41
                         00004142   400 	n =	"AB			; 0x4241	double character
    000000D2 41 42                  401 	.byte	>n,<n			; 41 42
                         00000001   402 	n =	n0x01			; 0x01		assignment
    000000D4 00 01                  403 	.byte	>n,<n			; 00 01
                         00000002   404 	n =	n + n0x01		; 0x02		addition
    000000D6 00 02                  405 	.byte	>n,<n			; 00 02
                         00000001   406 	n =	n - n0x01		; 0x01		subtraction
    000000D8 00 01                  407 	.byte	>n,<n			; 00 01
                         00000005   408 	n =	n * 0x05		; 0x05		multiplication
    000000DA 00 05                  409 	.byte	>n,<n			; 00 05
                         00000002   410 	n =	n / 0x02		; 0x02		division
    000000DC 00 02                  411 	.byte	>n,<n			; 00 02
                         00000001   412 	n =	n0x10 % 0x05		; 0x01		modulus
    000000DE 00 01                  413 	.byte	>n,<n			; 00 01
                         00000011   414 	n =	n0x10 | n0x01		; 0x11		or
    000000E0 00 11                  415 	.byte	>n,<n			; 00 11
                         00000001   416 	n =	n0xff & n0x01		; 0x01		and
    000000E2 00 01                  417 	.byte	>n,<n			; 00 01
                         00000010   418 	n =	n0x01 << 4		; 0x10		left shift
    000000E4 00 10                  419 	.byte	>n,<n			; 00 10
                         00000001   420 	n =	n0x10 >> 4		; 0x01		right shift
    000000E6 00 01                  421 	.byte	>n,<n			; 00 01
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 15
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Expression Evaluation

                         000000EF   422 	n =	n0xff ^ n0x10		; 0xef		xor
    000000E8 00 EF                  423 	.byte	>n,<n			; 00 EF
                         000000FF   424 	n =	n ^ n0x10		; 0xff		xor
    000000EA 00 FF                  425 	.byte	>n,<n			; 00 FF
                         FFFFFFEF   426 	n =	~n0x10			; 0xffef	1's complement
    000000EC FF EF                  427 	.byte	>n,<n			; FF EF
                         FFFFFFF0   428 	n =	-n0x10			; 0xfff0	2's complement
    000000EE FF F0                  429 	.byte	>n,<n			; FF F0
                                    430 
                                    431 
                                    432 
                         000000FF   433 	n =	n0xeeff & 0xff		; 0xff		low byte
    000000F0 00 FF                  434 	.byte	>n,<n			; 00 FF
                         000000EE   435 	n =	(n0xeeff & 0xff00)/0x100; 0xee		high byte
    000000F2 00 EE                  436 	.byte	>n,<n			; 00 EE
                                    437 
                                    438 
                         000000FF   439 	n =	n0xeeff % 0x100 	; 0xff		low byte
    000000F4 00 FF                  440 	.byte	>n,<n			; 00 FF
                         000000EE   441 	n =	n0xeeff / 0x100 	; 0xee		high byte
    000000F6 00 EE                  442 	.byte	>n,<n			; 00 EE
                                    443 
                                    444 
                         0000004E   445 	n =	3*(2 + 4*(6))		; 0x4e		expression evaluation
    000000F8 00 4E                  446 	.byte	>n,<n			; 00 4E
                         0000021E   447 	n =	2*(0x20 + <~n0x10)	; 0x21e
    000000FA 02 1E                  448 	.byte	>n,<n			; 02 1E
                                    449 
                                    450 
                                    451 	.sbttl	arithmatic tests
                                    452 	;
                                    453 	; The following series of tests verify that
                                    454 	; the arithmetic is 32-Bit and unsigned.
                                    455 
                                    456 
                                    457 	.sbttl	Addition
                                    458 
                         00000002   459 	n =	 1 +  1			; 0x00000001 + 0x00000001 ; 0x00000002
    000000FC 00 02                  460 	.byte	>n,<n			; 00 02
                         00000000   461 	n =	-1 +  1			; 0xFFFFFFFF + 0x00000001 ; 0x00000000
    000000FE 00 00                  462 	.byte	>n,<n			; 00 00
                         FFFFFFFE   463 	n =	-1 + -1			; 0xFFFFFFFF + 0xFFFFFFFF ; 0xFFFFFFFE
    00000100 FF FE                  464 	.byte	>n,<n			; FF FE
                                    465 
                         00010000   466 	n =	 32768 +  32768		; 0x00008000 + 0x00008000 ; 0x00010000
    00000102 00 00                  467 	.byte	>n,<n			; 00 00
                         00000000   468 	n =	-32768 +  32768		; 0xFFFF8000 + 0x00008000 ; 0x00000000
    00000104 00 00                  469 	.byte	>n,<n			; 00 00
                         FFFF0000   470 	n =	-32768 + -32768		; 0xFFFF8000 + 0xFFFF8000 ; 0xFFFF0000
    00000106 00 00                  471 	.byte	>n,<n			; 00 00
                                    472 
                         00010000   473 	n =	 65535 +  1		; 0x0000FFFF + 0x00000001 ; 0x00010000
    00000108 00 00                  474 	.byte	>n,<n			; 00 00
                         0000FFFE   475 	n =	 65535 + -1		; 0x0000FFFF + 0xFFFFFFFF ; 0x0000FFFE
    0000010A FF FE                  476 	.byte	>n,<n			; FF FE
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 16
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Addition

                                    477 
                                    478 
                                    479 	.sbttl	Subtraction
                                    480 
                         00000000   481 	n =	 1 -  1			; 0x00000001 - 0x00000001 ; 0x00000000
    0000010C 00 00                  482 	.byte	>n,<n			; 00 00
                         FFFFFFFE   483 	n =	-1 -  1			; 0xFFFFFFFF - 0x00000001 ; 0xFFFFFFFE
    0000010E FF FE                  484 	.byte	>n,<n			; FF FE
                         00000000   485 	n =	-1 - -1			; 0xFFFFFFFF - 0xFFFFFFFF ; 0x00000000
    00000110 00 00                  486 	.byte	>n,<n			; 00 00
                                    487 
                         00000000   488 	n =	 32768 -  32768		; 0x00008000 - 0xFFFF8000 ; 0x00000000
    00000112 00 00                  489 	.byte	>n,<n			; 00 00
                         FFFF0000   490 	n =	-32768 -  32768		; 0xFFFF8000 - 0x00008000 ; 0xFFFF0000
    00000114 00 00                  491 	.byte	>n,<n			; 00 00
                         00000000   492 	n =	-32768 - -32768		; 0xFFFF8000 - 0xFFFF8000 ; 0x00000000
    00000116 00 00                  493 	.byte	>n,<n			; 00 00
                                    494 
                         0000FFFE   495 	n =	 65535 -  1		; 0x0000FFFF - 0x00000001 ; 0x0000FFFE
    00000118 FF FE                  496 	.byte	>n,<n			; FF FE
                         00010000   497 	n =	 65535 - -1		; 0x0000FFFF - 0xFFFFFFFF ; 0x00010000
    0000011A 00 00                  498 	.byte	>n,<n			; 00 00
                                    499 
                                    500 
                                    501 	.sbttl	Multiplication
                                    502 
                         00000001   503 	n =	 1 *  1			; 0x00000001 * 0x00000001 ; 0x00000001
    0000011C 00 01                  504 	.byte	>n,<n			; 00 01
                         FFFFFFFF   505 	n =	 1 * -1			; 0x00000001 * 0xFFFFFFFF ; 0xFFFFFFFF
    0000011E FF FF                  506 	.byte	>n,<n			; FF FF
                         00000001   507 	n =	-1 * -1			; 0xFFFFFFFF * 0xFFFFFFFF ; 0x00000001
    00000120 00 01                  508 	.byte	>n,<n			; 00 01
                                    509 
                         00010000   510 	n =	 256 *  256		; 0x00000100 * 0x00000100 ; 0x00010000
    00000122 00 00                  511 	.byte	>n,<n			; 00 00
                         FFFF0000   512 	n =	 256 * -256		; 0x00000100 * 0xFFFFFF00 ; 0xFFFF0000
    00000124 00 00                  513 	.byte	>n,<n			; 00 00
                         00010000   514 	n =	-256 * -256		; 0xFFFFFF00 * 0xFFFFFF00 ; 0x00010000
    00000126 00 00                  515 	.byte	>n,<n			; 00 00
                                    516 
                                    517 
                                    518 	.sbttl	Division
                                    519 
                         00000001   520 	n =	 1 /  1			; 0x00000001 / 0x00000001 ; 0x00000001
    00000128 00 01                  521 	.byte	>n,<n			; 00 01
                         00000005   522 	n =	10 /  2			; 0x0000000A / 0x00000002 ; 0x00000005
    0000012A 00 05                  523 	.byte	>n,<n			; 00 05
                         00000080   524 	n =	512 / 4			; 0x00000200 / 0x00000004 ; 0x00000080
    0000012C 00 80                  525 	.byte	>n,<n			; 00 80
                         00004000   526 	n =	32768 / 2		; 0x00008000 / 0x00000002 ; 0x00004000
    0000012E 40 00                  527 	.byte	>n,<n			; 40 00
                         00007FFF   528 	n =	65535 / 2		; 0x0000FFFF / 0x00000002 ; 0x00007FFF
    00000130 7F FF                  529 	.byte	>n,<n			; 7F FF
                                    530 
                         00000000   531 	n = 	 1 / -1			; 0x00000001 / 0xFFFFFFFF ; 0x00000000
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 17
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Division

    00000132 00 00                  532 	.byte	>n,<n			; 00 00
                         00000000   533 	n =	 32767 / -1		; 0x00007FFF / 0xFFFFFFFF ; 0x00000000
    00000134 00 00                  534 	.byte	>n,<n			; 00 00
                         00000000   535 	n =	 32768 / -1		; 0x00008000 / 0xFFFFFFFF ; 0x00000000
    00000136 00 00                  536 	.byte	>n,<n			; 00 00
                         00000000   537 	n =	 65534 / -1		; 0x0000FFFE / 0xFFFFFFFF ; 0x00000000
    00000138 00 00                  538 	.byte	>n,<n			; 00 00
                         00000000   539 	n =	 65535 / -1		; 0x0000FFFF / 0xFFFFFFFF ; 0x00000000
    0000013A 00 00                  540 	.byte	>n,<n			; 00 00
                         00000001   541 	n =	-1 / -1			; 0xFFFFFFFF / 0xFFFFFFFF ; 0x00000001
    0000013C 00 01                  542 	.byte	>n,<n			; 00 01
                         00000000   543 	n =	-2 / -1			; 0xFFFFFFFE / 0xFFFFFFFF ; 0x00000000
    0000013E 00 00                  544 	.byte	>n,<n			; 00 00
                         00000000   545 	n =	-32768 / -1		; 0xFFFF8000 / 0xFFFFFFFF ; 0x00000000
    00000140 00 00                  546 	.byte	>n,<n			; 00 00
                         00000000   547 	n =	-32769 / -1		; 0xFFFF7FFF / OxFFFFFFFF ; 0x00000000
    00000142 00 00                  548 	.byte	>n,<n			; 00 00
                         00000000   549 	n =	-65535 / -1		; 0xFFFF0001 / 0xFFFFFFFF ; 0x00000000
    00000144 00 00                  550 	.byte	>n,<n			; 00 00
                         00000000   551 	n =	-65536 / -1		; 0xFFFF0000 / 0xFFFFFFFF ; 0x00000000
    00000146 00 00                  552 	.byte	>n,<n			; 00 00
                                    553 
                         00000000   554 	n =	-256 /   -1		; 0xFFFFFF00 / 0xFFFFFFFF ; 0x00000000
    00000148 00 00                  555 	.byte	>n,<n			; 00 00
                         00000000   556 	n =	-256 / -255		; 0xFFFFFF00 / 0xFFFFFF01 ; 0x00000000
    0000014A 00 00                  557 	.byte	>n,<n			; 00 00
                         00000001   558 	n =	-256 / -256		; 0xFFFFFF00 / 0xFFFFFF00 ; 0x00000001
    0000014C 00 01                  559 	.byte	>n,<n			; 00 01
                         00000001   560 	n =	-256 / -257		; 0xFFFFFF00 / 0xFFFFFEFF ; 0x00000001
    0000014E 00 01                  561 	.byte	>n,<n			; 00 01
                         00000001   562 	n =	-256 / -32767		; 0xFFFFFF00 / 0xFFFF8001 ; 0x00000001
    00000150 00 01                  563 	.byte	>n,<n			; 00 01
                         00000001   564 	n =	-256 / -32768		; 0xFFFFFF00 / 0xFFFF8000 ; 0x00000001
    00000152 00 01                  565 	.byte	>n,<n			; 00 01
                         0001FFFF   566 	n =	-256 /  32768		; 0xFFFFFF00 / 0x00008000 ; 0x0001FFFF
    00000154 FF FF                  567 	.byte	>n,<n			; FF FF
                         00010101   568 	n =	-256 /  65280		; 0xFFFFFF00 / 0x0000FF00 ; 0x00010101
    00000156 01 01                  569 	.byte	>n,<n			; 01 01
                         000100FF   570 	n =	-256 /  65281		; 0xFFFFFF00 / 0x0000FF01 ; 0x000100FF
    00000158 00 FF                  571 	.byte	>n,<n			; 00 FF
                         00010000   572 	n =	-256 /  65535		; 0xFFFFFF00 / 0x0000FFFF ; 0x00010000
    0000015A 00 00                  573 	.byte	>n,<n			; 00 00
                                    574 
                                    575 
                                    576 	.sbttl	Modulus
                                    577 
                         00000000   578 	n =	 1 %  1			; 0x00000001 % 0x00000001 ; 0x00000000
    0000015C 00 00                  579 	.byte	>n,<n			; 00 00
                         00000000   580 	n =	10 %  2			; 0x0000000A % 0x00000002 ; 0x00000000
    0000015E 00 00                  581 	.byte	>n,<n			; 00 00
                         00000000   582 	n =	512 % 4			; 0x00000200 % 0x00000004 ; 0x00000000
    00000160 00 00                  583 	.byte	>n,<n			; 00 00
                         00000000   584 	n =	32768 % 2		; 0x00008000 % 0x00000002 ; 0x00000000
    00000162 00 00                  585 	.byte	>n,<n			; 00 00
                         00000001   586 	n =	65535 % 2		; 0x0000FFFF % 0x00000002 ; 0x00000001
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 18
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Modulus

    00000164 00 01                  587 	.byte	>n,<n			; 00 01
                                    588 
                         00000001   589 	n = 	 1 % -1			; 0x00000001 % 0xFFFFFFFF ; 0x00000001
    00000166 00 01                  590 	.byte	>n,<n			; 00 01
                         00007FFF   591 	n =	 32767 % -1		; 0x00007FFF % 0xFFFFFFFF ; 0x00007FFF
    00000168 7F FF                  592 	.byte	>n,<n			; 7F FF
                         00008000   593 	n =	 32768 % -1		; 0x00008000 % 0xFFFFFFFF ; 0x00008000
    0000016A 80 00                  594 	.byte	>n,<n			; 80 00
                         0000FFFE   595 	n =	 65534 % -1		; 0x0000FFFE % 0xFFFFFFFF ; 0x0000FFFE
    0000016C FF FE                  596 	.byte	>n,<n			; FF FE
                         0000FFFF   597 	n =	 65535 % -1		; 0x0000FFFF % 0xFFFFFFFF ; 0x0000FFFF
    0000016E FF FF                  598 	.byte	>n,<n			; FF FF
                         00000000   599 	n =	-1 % -1			; 0xFFFFFFFF % 0xFFFFFFFF ; 0x00000000
    00000170 00 00                  600 	.byte	>n,<n			; 00 00
                         FFFFFFFE   601 	n =	-2 % -1			; 0xFFFFFFFE % 0xFFFFFFFF ; 0xFFFFFFFE
    00000172 FF FE                  602 	.byte	>n,<n			; FF FE
                         FFFF8000   603 	n =	-32768 % -1		; 0xFFFF8000 % 0xFFFFFFFF ; 0xFFFF8000
    00000174 80 00                  604 	.byte	>n,<n			; 80 00
                         FFFF7FFF   605 	n =	-32769 % -1		; 0xFFFF7FFF % 0xFFFFFFFF ; 0xFFFF7FFF
    00000176 7F FF                  606 	.byte	>n,<n			; 7F FF
                         FFFF0001   607 	n =	-65535 % -1		; 0xFFFF0001 % 0xFFFFFFFF ; 0xFFFF0001
    00000178 00 01                  608 	.byte	>n,<n			; 00 01
                         FFFF0000   609 	n =	-65536 % -1		; 0xFFFF0000 % 0xFFFFFFFF ; 0xFFFF0000
    0000017A 00 00                  610 	.byte	>n,<n			; 00 00
                                    611 
                         FFFFFF00   612 	n =	-256 %   -1		; 0xFFFFFF00 % 0xFFFFFFFF ; 0XFFFFFF00
    0000017C FF 00                  613 	.byte	>n,<n			; FF 00
                         FFFFFF00   614 	n =	-256 % -255		; 0xFFFFFF00 % 0xFFFFFF01 ; 0xFFFFFF00
    0000017E FF 00                  615 	.byte	>n,<n			; FF 00
                         00000000   616 	n =	-256 % -256		; 0xFFFFFF00 % 0xFFFFFF00 ; 0X00000000
    00000180 00 00                  617 	.byte	>n,<n			; 00 00
                         00000001   618 	n =	-256 % -257		; 0xFFFFFF00 % 0XFFFFFF01 ; 0x00000001
    00000182 00 01                  619 	.byte	>n,<n			; 00 01
                         00007EFF   620 	n =	-256 % -32767		; 0xFFFFFF00 % 0xFFFF8001 ; 0x00007EFF
    00000184 7E FF                  621 	.byte	>n,<n			; 7E FF
                         00007F00   622 	n =	-256 % -32768		; 0xFFFFFF00 % 0xFFFF8000 ; 0x00007F00
    00000186 7F 00                  623 	.byte	>n,<n			; 7F 00
                         00007F00   624 	n =	-256 %  32768		; 0xFFFFFF00 % 0x00008000 ; 0x00007F00
    00000188 7F 00                  625 	.byte	>n,<n			; 7F 00
                         00000000   626 	n =	-256 %  65280		; 0xFFFFFF00 % 0x0000FF00 ; 0x00000000
    0000018A 00 00                  627 	.byte	>n,<n			; 00 00
                         0000FD01   628 	n =	-256 %  65281		; 0xFFFFFF00 % 0x0000FF01 ; 0x0000FD01
    0000018C FD 01                  629 	.byte	>n,<n			; FD 01
                         0000FF00   630 	n =	-256 %  65535		; 0xFFFFFF00 % 0x0000FFFF ; 0x0000FF00
    0000018E FF 00                  631 	.byte	>n,<n			; FF 00
                                    632 
                                    633 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 19
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
IF, ELSE, and ENDIF

                                    635 	.sbttl	IF, ELSE, and ENDIF
                                    636 
                         00000000   637 	n = 0
                         00000000   638 	m = 0
                                    639 
                         00000000   640 	.if	0
                                    641 		n = 1
                                    642 		.if	0
                                    643 		m = 1
                                    644 		.else
                                    645 		m = 2
                                    646 		.endif
                         00000001   647 	.else
                         00000002   648 		n = 2
                                    649 	.endif
                                    650 
                                    651 					; n = 2, m = 0
    00000190 02 00                  652 	.byte	n,m			; 02 00
                                    653 
                                    654 
                         00000000   655 	n = 0
                         00000000   656 	m = 0
                                    657 
                         00000001   658 	.if	1
                         00000001   659 		n = 1
                         00000000   660 		.if	0
                                    661 		m = 1
                         00000001   662 		.else
                         00000002   663 		m = 2
                                    664 		.endif
                         00000000   665 	.else
                                    666 		n = 2
                                    667 	.endif
                                    668 
                                    669 					; n = 1, m = 2
    00000192 01 02                  670 	.byte	n,m			; 01 02
                                    671 
                                    672 	;*******************************************************
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 20
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
IF, ELSE, and ENDIF

                                    674 	;*******************************************************
                                    675 
                         00000000   676 	n = 0
                         00000000   677 	m = 0
                                    678 
                         00000000   679 	.if	0
                                    680 		n = 1
                                    681 		.if	1
                                    682 		m = 1
                                    683 		.else
                                    684 		m = 2
                                    685 		.endif
                         00000001   686 	.else
                         00000002   687 		n = 2
                                    688 	.endif
                                    689 
                                    690 					; n = 2, m = 0
    00000194 02 00                  691 	.byte	n,m			; 02 00
                                    692 
                                    693 
                         00000000   694 	n = 0
                         00000000   695 	m = 0
                                    696 
                         00000001   697 	.if	1
                         00000001   698 		n = 1
                         00000001   699 		.if	1
                         00000001   700 		m = 1
                         00000000   701 		.else
                                    702 		m = 2
                                    703 		.endif
                         00000000   704 	.else
                                    705 		n = 2
                                    706 	.endif
                                    707 
                                    708 					; n = 1, m = 1
    00000196 01 01                  709 	.byte	n,m			; 01 01
                                    710 
                                    711 	;*******************************************************
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 21
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
IF, ELSE, and ENDIF

                                    713 	;*******************************************************
                                    714 
                         00000000   715 	n = 0
                         00000000   716 	m = 0
                                    717 
                         00000000   718 	.if	0
                                    719 		n = 1
                         00000001   720 	.else
                         00000000   721 		.if	0
                                    722 		m = 1
                         00000001   723 		.else
                         00000002   724 		m = 2
                                    725 		.endif
                         00000002   726 		n = 2
                                    727 	.endif
                                    728 
                                    729 					; n = 2, m = 2
    00000198 02 02                  730 	.byte	n,m			; 02 02
                                    731 
                                    732 
                         00000000   733 	n = 0
                         00000000   734 	m = 0
                                    735 
                         00000001   736 	.if	1
                         00000001   737 		n = 1
                         00000000   738 	.else
                                    739 		.if	0
                                    740 		m = 1
                                    741 		.else
                                    742 		m = 2
                                    743 		.endif
                                    744 		n = 2
                                    745 	.endif
                                    746 
                                    747 					; n = 1, m = 0
    0000019A 01 00                  748 	.byte	n,m			; 01 00
                                    749 
                                    750 	;*******************************************************
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 22
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
IF, ELSE, and ENDIF

                                    752 	;*******************************************************
                                    753 
                         00000000   754 	n = 0
                         00000000   755 	m = 0
                                    756 
                         00000000   757 	.if	0
                                    758 		n = 1
                         00000001   759 	.else
                         00000001   760 		.if	1
                         00000001   761 		m = 1
                         00000000   762 		.else
                                    763 		m = 2
                                    764 		.endif
                         00000002   765 		n = 2
                                    766 	.endif
                                    767 
                                    768 					; n = 2, m = 1
    0000019C 02 01                  769 	.byte	n,m			; 02 01
                                    770 
                                    771 
                         00000000   772 	n = 0
                         00000000   773 	m = 0
                                    774 
                         00000001   775 	.if	1
                         00000001   776 		n = 1
                         00000000   777 	.else
                                    778 		.if	1
                                    779 		m = 1
                                    780 		.else
                                    781 		m = 2
                                    782 		.endif
                                    783 		n = 2
                                    784 	.endif
                                    785 
                                    786 					; n = 1, m = 0
    0000019E 01 00                  787 	.byte	n,m			; 01 00
                                    788 
                                    789 	;*******************************************************
                                    790 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 23
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Signed Conditionals With -1

                                    792 	.sbttl	Signed Conditionals With -1
                                    793 
                         FFFFFFFF   794 	n = -1
                                    795 
                         00000000   796 	.ifeq	n
                                    797 		.error	1		; n = -1, .ifeq n  != 0
                                    798 	.endif
                                    799 
                         00000001   800 	.ifne	n
                         00000000   801 	.else
                                    802 		.error	1		; n = -1, .ifne n  != 0
                                    803 	.endif
                                    804 
                         00000000   805 	.ifgt	n
                                    806 		.error	1		; n = -1, .ifgt n  !>= 0
                                    807 	.endif
                                    808 
                         00000001   809 	.iflt	n
                         00000000   810 	.else
                                    811 		.error	1		; n = -1, .iflt n  !>= 0
                                    812 	.endif
                                    813 
                         00000000   814 	.ifge	n
                                    815 		.error	1		; n = -1, .ifge n  !>= 0
                                    816 	.endif
                                    817 
                         00000001   818 	.ifle	n
                         00000000   819 	.else
                                    820 		.error	1		; n = -1, .ifle n  !> 0
                                    821 	.endif
                                    822 
                                    823 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 24
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Signed Conditionals With 0

                                    825 	.sbttl	Signed Conditionals With 0
                                    826 
                         00000000   827 	n = 0
                                    828 
                         00000001   829 	.ifeq	n
                         00000000   830 	.else
                                    831 		.error	1		; n = 0, .ifeq n  == 0
                                    832 	.endif
                                    833 
                         00000000   834 	.ifne	n
                                    835 		.error	1		; n = 0, .ifne n  == 0
                                    836 	.endif
                                    837 
                         00000000   838 	.ifgt	n
                                    839 		.error	1		; n = 0, .ifgt n  !> 0
                                    840 	.endif
                                    841 
                         00000000   842 	.iflt	n
                                    843 		.error	1		; n = 0, .iflt n  !< 0
                                    844 	.endif
                                    845 
                         00000001   846 	.ifge	n
                         00000000   847 	.else
                                    848 		.error	1		; n = 0, .ifge n  !< 0
                                    849 	.endif
                                    850 
                         00000001   851 	.ifle	n
                         00000000   852 	.else
                                    853 		.error	1		; n = 0, .ifle n  !> 0
                                    854 	.endif
                                    855 
                                    856 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 25
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Signed Conditionals With +1

                                    858 	.sbttl	Signed Conditionals With +1
                                    859 
                         00000001   860 	n = +1
                                    861 
                         00000000   862 	.ifeq	n
                                    863 		.error	1		; n = +1, .ifeq n  != 0
                                    864 	.endif
                                    865 
                         00000001   866 	.ifne	n
                         00000000   867 	.else
                                    868 		.error	1		; n = +1, .ifne n  != 0
                                    869 	.endif
                                    870 
                         00000001   871 	.ifgt	n
                         00000000   872 	.else
                                    873 		.error	1		; n = +1, .ifgt n  !<= 0
                                    874 	.endif
                                    875 
                         00000000   876 	.iflt	n
                                    877 		.error	1		; n = +1, .iflt n  !<= 0
                                    878 	.endif
                                    879 
                         00000001   880 	.ifge	n
                         00000000   881 	.else
                                    882 		.error	1		; n = +1, .ifge n  !< 0
                                    883 	.endif
                                    884 
                         00000000   885 	.ifle	n
                                    886 		.error	1		; n = +1, .ifle n  !<= 0
                                    887 	.endif
                                    888 
                                    889 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 26
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Alternate Signed Conditionals With -1

                                    891 	.sbttl	Alternate Signed Conditionals With -1
                                    892 
                         FFFFFFFF   893 	n = -1
                                    894 
                         00000000   895 	.if	eq	n
                                    896 		.error	1		; n = -1, .ifeq n  != 0
                                    897 	.endif
                                    898 
                         00000001   899 	.if	ne	n
                         00000000   900 	.else
                                    901 		.error	1		; n = -1, .ifne n  != 0
                                    902 	.endif
                                    903 
                         00000000   904 	.if	gt	n
                                    905 		.error	1		; n = -1, .ifgt n  !>= 0
                                    906 	.endif
                                    907 
                         00000001   908 	.if	lt	n
                         00000000   909 	.else
                                    910 		.error	1		; n = -1, .iflt n  !>= 0
                                    911 	.endif
                                    912 
                         00000000   913 	.if	ge	n
                                    914 		.error	1		; n = -1, .ifge n  !>= 0
                                    915 	.endif
                                    916 
                         00000001   917 	.if	le	n
                         00000000   918 	.else
                                    919 		.error	1		; n = -1, .ifle n  !> 0
                                    920 	.endif
                                    921 
                                    922 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 27
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Alternate Signed Conditionals With 0

                                    924 	.sbttl	Alternate Signed Conditionals With 0
                                    925 
                         00000000   926 	n = 0
                                    927 
                         00000001   928 	.if	eq	n
                         00000000   929 	.else
                                    930 		.error	1		; n = 0, .ifeq n  == 0
                                    931 	.endif
                                    932 
                         00000000   933 	.if	ne	n
                                    934 		.error	1		; n = 0, .ifne n  == 0
                                    935 	.endif
                                    936 
                         00000000   937 	.if	gt	n
                                    938 		.error	1		; n = 0, .ifgt n  !> 0
                                    939 	.endif
                                    940 
                         00000000   941 	.if	lt	n
                                    942 		.error	1		; n = 0, .iflt n  !< 0
                                    943 	.endif
                                    944 
                         00000001   945 	.if	ge	n
                         00000000   946 	.else
                                    947 		.error	1		; n = 0, .ifge n  !< 0
                                    948 	.endif
                                    949 
                         00000001   950 	.if	le	n
                         00000000   951 	.else
                                    952 		.error	1		; n = 0, .ifle n  !> 0
                                    953 	.endif
                                    954 
                                    955 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 28
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Alternate Signed Conditionals With +1

                                    957 	.sbttl	Alternate Signed Conditionals With +1
                                    958 
                         00000001   959 	n = +1
                                    960 
                         00000000   961 	.if	eq	n
                                    962 		.error	1		; n = +1, .ifeq n  != 0
                                    963 	.endif
                                    964 
                         00000001   965 	.if	ne	n
                         00000000   966 	.else
                                    967 		.error	1		; n = +1, .ifne n  != 0
                                    968 	.endif
                                    969 
                         00000001   970 	.if	gt	n
                         00000000   971 	.else
                                    972 		.error	1		; n = +1, .ifgt n  !<= 0
                                    973 	.endif
                                    974 
                         00000000   975 	.if	lt	n
                                    976 		.error	1		; n = +1, .iflt n  !<= 0
                                    977 	.endif
                                    978 
                         00000001   979 	.if	ge	n
                         00000000   980 	.else
                                    981 		.error	1		; n = +1, .ifge n  !< 0
                                    982 	.endif
                                    983 
                         00000000   984 	.if	le	n
                                    985 		.error	1		; n = +1, .ifle n  !<= 0
                                    986 	.endif
                                    987 
                                    988 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 29
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Conditionals With String Tests

                                    990 	.sbttl	Conditionals With String Tests
                                    991 
                         00000000   992 	.ifb	J		; 0
                                    993 	 .error	1		; .if b,J failed
                                    994 	.endif
                                    995 
                         00000001   996 	.ifb			; 1
    000001A0 06                     997 	 .byte	0x06	        ; 06
                                    998 	.endif
                                    999 
                         00000000  1000 	.ifnb			; 0
                                   1001 	 .error	1		; .if nb failed
                                   1002 	.endif
                                   1003 
                         00000001  1004 	.ifnb	J		; 1
    000001A1 07                    1005 	 .byte	0x07		; 07
                                   1006 	.endif
                                   1007 
                                   1008 	.undefine	defsym
                         00000000  1009 	.ifdef	defsym		; 0
                                   1010 	 .error	1		; .if def,defsym failed
                                   1011 	.endif
                                   1012 
                                   1013 	.define		defsym
                         00000001  1014 	.ifdef	defsym		; 1
    000001A2 08                    1015 	 .byte	0x08	        ; 08
                                   1016 	.endif
                                   1017 
                         00000000  1018 	.ifndef	defsym		; 0
                                   1019 	 .error	1		; .if def,defsym failed
                                   1020 	.endif
                                   1021 
                                   1022 	.undefine	defsym
                         00000001  1023 	.ifndef	defsym		; 1
    000001A3 09                    1024 	 .byte	0x09		; 09
                                   1025 	.endif
                                   1026 
                         00000000  1027 	.ifidn	A,B		; 0
                                   1028 	 .error	1		; .if iden A,B failed
                                   1029 	.endif
                                   1030 
                         00000001  1031 	.ifidn	D,D		; 1
    000001A4 0A                    1032 	 .byte	0x0A		; 0A
                                   1033 	.endif
                                   1034 
                         00000000  1035 	.ifdif	D,D		; 0
                                   1036 	 .error	1		; .if dif D,D failed
                                   1037 	.endif
                                   1038 
                         00000001  1039 	.ifdif	A,B		; 1
    000001A5 0B                    1040 	 .byte	0x0B		; 0B
                                   1041 	.endif
                                   1042 
                                   1043 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 30
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Alternate Conditionals With String Tests

                                   1045 	.sbttl	Alternate Conditionals With String Tests
                                   1046 
                         00000000  1047 	.if	b	J	; 0
                                   1048 	 .error	1		; .if b,J failed
                                   1049 	.endif
                                   1050 
                         00000001  1051 	.if	b		; 1
    000001A6 06                    1052 	 .byte	0x06	        ; 06
                                   1053 	.endif
                                   1054 
                         00000000  1055 	.if	nb		; 0
                                   1056 	 .error	1		; .if nb failed
                                   1057 	.endif
                                   1058 
                         00000001  1059 	.if	nb	J	; 1
    000001A7 07                    1060 	 .byte	0x07		; 07
                                   1061 	.endif
                                   1062 
                                   1063 	.undefine	defsym
                         00000000  1064 	.if	def	defsym	; 0
                                   1065 	 .error	1		; .if def,defsym failed
                                   1066 	.endif
                                   1067 
                                   1068 	.define		defsym
                         00000001  1069 	.if	def	defsym	; 1
    000001A8 08                    1070 	 .byte	0x08	        ; 08
                                   1071 	.endif
                                   1072 
                         00000000  1073 	.if	ndef	defsym	; 0
                                   1074 	 .error	1		; .if def,defsym failed
                                   1075 	.endif
                                   1076 
                                   1077 	.undefine	defsym
                         00000001  1078 	.if	ndef	defsym	; 1
    000001A9 09                    1079 	 .byte	0x09		; 09
                                   1080 	.endif
                                   1081 
                         00000000  1082 	.if	idn	A,B	; 0
                                   1083 	 .error	1		; .if iden A,B failed
                                   1084 	.endif
                                   1085 
                         00000001  1086 	.if	idn	D,D	; 1
    000001AA 0A                    1087 	 .byte	0x0A		; 0A
                                   1088 	.endif
                                   1089 
                         00000000  1090 	.if	dif	D,D	; 0
                                   1091 	 .error	1		; .if dif D,D failed
                                   1092 	.endif
                                   1093 
                         00000001  1094 	.if	dif	A,B	; 1
    000001AB 0B                    1095 	 .byte	0x0B		; 0B
                                   1096 	.endif
                                   1097 
                                   1098 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 31
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Signed Immediate Conditionals

                                   1100 	.sbttl	Signed Immediate Conditionals
                                   1101 
                         FFFFFFFF  1102 	n = -1
                                   1103 
                                   1104 	.iifeq	n	.error	1	; n = -1, .ifeq n  != 0
    000001AC 01                    1105 	.iifne	n	.byte	0x01	; 01
                                   1106 	.iifgt	n	.error	1	; n = -1, .ifgt n  !>= 0
    000001AD 02                    1107 	.iiflt	n	.byte	0x02	; 02
                                   1108 	.iifge	n	.error	1	; n = -1, .ifge n  !>= 0
    000001AE 03                    1109 	.iifle	n	.byte	0x03	; 03
                                   1110 
                                   1111 
                         00000000  1112 	n = 0
                                   1113 
    000001AF 04                    1114 	.iifeq	n	.byte	0x04	; 04
                                   1115 	.iifne	n	.error	1	; n = 0, .ifne n  == 0
                                   1116 	.iifgt	n	.error	1	; n = 0, .ifgt n  !> 0
                                   1117 	.iiflt	n	.error	1	; n = 0, .iflt n  !< 0
    000001B0 05                    1118 	.iifge	n	.byte	0x05	; 05
    000001B1 06                    1119 	.iifle	n	.byte	0x06; 06
                                   1120 
                                   1121 
                         00000001  1122 	n = +1
                                   1123 
                                   1124 	.iifeq	n	.error	1	; n = +1, .ifeq n  != 0
    000001B2 07                    1125 	.iifne	n	.byte	0x07; 07
    000001B3 08                    1126 	.iifgt	n	.byte	0x08; 08
                                   1127 	.iiflt	n	.error	1	; n = +1, .iflt n  !<= 0
    000001B4 09                    1128 	.iifge	n	.byte	0x09; 09
                                   1129 	.iifle	n	.error	1	; n = +1, .ifle n  !<= 0
                                   1130 
                                   1131 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 32
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Alternate Signed Immediate Conditionals

                                   1133 	.sbttl	Alternate Signed Immediate Conditionals
                                   1134 
                         FFFFFFFF  1135 	n = -1
                                   1136 
                                   1137 	.iif	eq,n	.error	1	; n = -1, .ifeq n  != 0
    000001B5 01                    1138 	.iif	ne,n	.byte	0x01	; 01
                                   1139 	.iif	gt,n	.error	1	; n = -1, .ifgt n  !>= 0
    000001B6 02                    1140 	.iif	lt,n	.byte	0x02	; 02
                                   1141 	.iif	ge,n	.error	1	; n = -1, .ifge n  !>= 0
    000001B7 03                    1142 	.iif	le,n	.byte	0x03	; 03
                                   1143 
                                   1144 
                         00000000  1145 	n = 0
                                   1146 
    000001B8 04                    1147 	.iif	eq,n	.byte	0x04	; 04
                                   1148 	.iif	ne,n	.error	1	; n = 0, .ifne n  == 0
                                   1149 	.iif	gt,n	.error	1	; n = 0, .ifgt n  !> 0
                                   1150 	.iif	lt,n	.error	1	; n = 0, .iflt n  !< 0
    000001B9 05                    1151 	.iif	ge,n	.byte	0x05	; 05
    000001BA 06                    1152 	.iif	le,n	.byte	0x06	; 06
                                   1153 
                                   1154 
                         00000001  1155 	n = +1
                                   1156 
                                   1157 	.iif	eq,n	.error	1	; n = +1, .ifeq n  != 0
    000001BB 07                    1158 	.iif	ne,n	.byte	0x07	; 07
    000001BC 08                    1159 	.iif	gt,n	.byte	0x08	; 08
                                   1160 	.iif	lt,n	.error	1	; n = +1, .iflt n  !<= 0
    000001BD 09                    1161 	.iif	ge,n	.byte	0x09	; 09
                                   1162 	.iif	le,n	.error	1	; n = +1, .ifle n  !<= 0
                                   1163 
                                   1164 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 33
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Immediate Conditionals With Strings

                                   1166 	.sbttl	Immediate Conditionals With Strings
                                   1167 
                                   1168 	.iifb	J	 .error	1	; .if b,J failed
    000001BE 01                    1169 	.iifb	^!!	 .byte	0x01	; 01
                                   1170 	.iifnb	^!!	 .error	1	; .if nb failed
    000001BF 02                    1171 	.iifnb	J	 .byte	0x02	; 02
                                   1172 
                                   1173 	.undefine  defsym
                                   1174 	.iifdef	defsym	 .error	1	; .if def,defsym failed
                                   1175 
                                   1176 	.define  defsym
    000001C0 03                    1177 	.iifdef	defsym	.byte	0x03	; 03
                                   1178 	.iifndef defsym	.error	1	; .if def,defsym failed
                                   1179 
                                   1180 	.undefine  defsym
    000001C1 04                    1181 	.iifndef defsym	 .byte	0x04	; 04
                                   1182 
                                   1183 	.iifidn	A,B	.error	1	; .if iden A,B failed
    000001C2 05                    1184 	.iifidn	D,D	.byte	0x05	; 05
                                   1185 	.iifdif	D,D	.error	1	; .if dif D,D failed
    000001C3 06                    1186 	.iifdif	A,B	.byte	0x06	; 06
                                   1187 
                                   1188 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 34
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Alternate Immediate Conditionals With Strings

                                   1190 	.sbttl	Alternate Immediate Conditionals With Strings
                                   1191 
                                   1192 	.iif	b,J	 .error	1	; .if b,J failed
    000001C4 01                    1193 	.iif	b,^!!	 .byte	0x01	; 01
                                   1194 	.iif	nb,^!!	 .error	1	; .if nb failed
    000001C5 02                    1195 	.iif	nb,J	 .byte	0x02	; 02
                                   1196 
                                   1197 	.undefine  defsym
                                   1198 	.iif	def,defsym	 .error	1	; .if def,defsym failed
                                   1199 
                                   1200 	.define  defsym
    000001C6 03                    1201 	.iif	def,defsym	.byte	0x03	; 03
                                   1202 	.iif	ndef,defsym	.error	1	; .if def,defsym failed
                                   1203 
                                   1204 	.undefine  defsym
    000001C7 04                    1205 	.iif	ndef,defsym	 .byte	0x04	; 04
                                   1206 
                                   1207 	.iif	idn	A,B	.error	1	; .if iden A,B failed
    000001C8 05                    1208 	.iif	idn	D,D	.byte	0x05	; 05
                                   1209 	.iif	dif	D,D	.error	1	; .if dif D,D failed
    000001C9 06                    1210 	.iif	dif	A,B	.byte	0x06	; 06
                                   1211 
                                   1212 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 35
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Local Symbols

                                   1214 	.sbttl	Local Symbols
                                   1215 
    00000000                       1216 	.org	0
                                   1217 
    00000000                       1218 lclsym0:
                                   1219 					; forward references
    00000000s00r14s00r16           1220 	.word	0$,1$			;s00r14s00r16
    00000004s00r18s00r1A           1221 	.word	2$,3$			;s00r18s00r1A
    00000008s00r1Cs00r1E           1222 	.word	4$,5$			;s00r1Cs00r1E
    0000000Cs00r20s00r22           1223 	.word	6$,7$			;s00r20s00r22
    00000010s00r24s00r26           1224 	.word	8$,9$			;s00r24s00r26
                                   1225 
    00000014s00r26                 1226 0$:	.word	9$			;s00r26
    00000016s00r24                 1227 1$:	.word	8$			;s00r24
    00000018s00r22                 1228 2$:	.word	7$			;s00r22
    0000001As00r20                 1229 3$:	.word	6$			;s00r20
    0000001Cs00r1E                 1230 4$:	.word	5$			;s00r1E
    0000001Es00r1C                 1231 5$:	.word	4$			;s00r1C
    00000020s00r1A                 1232 6$:	.word	3$			;s00r1A
    00000022s00r18                 1233 7$:	.word	2$			;s00r18
    00000024s00r16                 1234 8$:	.word	1$			;s00r16
    00000026s00r14                 1235 9$:	.word	0$			;s00r14
    00000028                       1236 10$:
                                   1237 
                                   1238 					; backward references
    00000028s00r14s00r16           1239 	.word	0$,1$			;s00r14s00r16
    0000002Cs00r18s00r1A           1240 	.word	2$,3$			;s00r18s00r1A
    00000030s00r1Cs00r1E           1241 	.word	4$,5$			;s00r1Cs00r1E
    00000034s00r20s00r22           1242 	.word	6$,7$			;s00r20s00r22
    00000038s00r24s00r26           1243 	.word	8$,9$			;s00r24s00r26
                                   1244 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 36
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Local Symbols

                                   1246 
    0000003C                       1247 lclsym1:
                                   1248 					; forward references
    0000003Cs00r50s00r52           1249 	.word	0$,1$			;s00r50s00r52
    00000040s00r54s00r56           1250 	.word	2$,3$			;s00r54s00r56
    00000044s00r58s00r5A           1251 	.word	4$,5$			;s00r58s00r5A
    00000048s00r5Cs00r5E           1252 	.word	6$,7$			;s00r5Cs00r5E
    0000004Cs00r60s00r62           1253 	.word	8$,9$			;s00r60s00r62
                                   1254 
    00000050s00r62                 1255 0$:	.word	9$			;s00r62
    00000052s00r60                 1256 1$:	.word	8$			;s00r60
    00000054s00r5E                 1257 2$:	.word	7$			;s00r5E
    00000056s00r5C                 1258 3$:	.word	6$			;s00r5C
    00000058s00r5A                 1259 4$:	.word	5$			;s00r5A
    0000005As00r58                 1260 5$:	.word	4$			;s00r58
    0000005Cs00r56                 1261 6$:	.word	3$			;s00r56
    0000005Es00r54                 1262 7$:	.word	2$			;s00r54
    00000060s00r52                 1263 8$:	.word	1$			;s00r52
    00000062s00r50                 1264 9$:	.word	0$			;s00r50
    00000064                       1265 10$:
                                   1266 
                                   1267 					; backward references
    00000064s00r50s00r52           1268 	.word	0$,1$			;s00r50s00r52
    00000068s00r54s00r56           1269 	.word	2$,3$			;s00r54s00r56
    0000006Cs00r58s00r5A           1270 	.word	4$,5$			;s00r58s00r5A
    00000070s00r5Cs00r5E           1271 	.word	6$,7$			;s00r5Cs00r5E
    00000074s00r60s00r62           1272 	.word	8$,9$			;s00r60s00r62
                                   1273 
                                   1274 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 37
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Offset calculations

                                   1276 	.sbttl	Offset calculations
                                   1277 
                         00000014  1278 	ofsbyte	=	(10$-0$)	; 0x0014
                         0000000A  1279 	ofsword	=	ofsbyte/2	; 0x000A
                                   1280 
                                   1281 					; 1$ + 0x001E
    00000078s00r70                 1282 	.word	1$+ofsbyte+ofsword	;s00r70
                                   1283 
                                   1284 	.sbttl	Lower/Upper Byte Selections
                                   1285 
                                   1286 	.globl	extern
                                   1287 
                                   1288 					; low byte
    0000007Ar01                    1289 	.byte	< (extern + 0x0001)	;r01
                                   1290 
                                   1291 					; low byte
    0000007Br00                    1292 	.byte	< (extern + 0x0200)	;r00
                                   1293 
                                   1294 					; high byte
    0000007Cs00                    1295 	.byte	> (extern + 0x0003)	;s00
                                   1296 
                                   1297 					; high byte
    0000007Ds04                    1298 	.byte	> (extern + 0x0400)	;s04
                                   1299 
                                   1300 	.msb	0			; select byte 0
    0000007Er10                    1301 	.byte	> (extern + 0x76543210)	;r10
                                   1302 
                                   1303 	.msb	1			; select byte 1
    0000007Fs32                    1304 	.byte	> (extern + 0x76543210)	;s32
                                   1305 
                                   1306 	.msb	2			; select byte 2
    00000080R54                    1307 	.byte	> (extern + 0x76543210)	;R54
                                   1308 
                                   1309 	.msb	3			;select byte 3
    00000081S76                    1310 	.byte	> (extern + 0x76543210)	;S76
                                   1311 
                                   1312 	.msb	1			; reset to byte 1
                                   1313 
                                   1314 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 38
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Area Definitions

                                   1316 	.sbttl	Area Definitions
                                   1317 
                                   1318 	.globl	code0
                                   1319 	.globl	cnstnt1,cnstnt2
                                   1320 
                         0000ABCD  1321 	cnstnt0 == 0xabcd		; global equate
                                   1322 
    00000082s00r00                 1323 code0:	.word	a00			;s00r00
    00000084 AB CD                 1324 	.word	cnstnt0			; AB CD
                                   1325 
                                   1326 	; Bank selected as _DSEG
                                   1327 	; Overlay and Data Segment
                                   1328 	.area	AreaA (OVR,DSEG,BANK=_DSEG)
                                   1329 
                         00001234  1330 	cnstnt1 = 0x1234
                                   1331 
    00000000 00 FF                 1332 a00:	.word	0x00ff			; 00 FF
                                   1333 
                                   1334 	; Bank selected as _DSEG
                                   1335 	; Overlay and Data Segment
                                   1336 	.area	AreaB (ABS,OVR,DSEG,BANK=_DSEG)
                                   1337 
                         00005678  1338 	cnstnt2 = 0x5678
                                   1339 
    00000000s00r00                 1340 	.word	a10			;s00r00
                                   1341 
                                   1342 	.area	AreaA
                                   1343 
                         00000022  1344 	.=.+0x0020
    00000022s00r00                 1345 	.word	a20			;s00r00
                                   1346 
                                   1347 	.area	AreaB
    00000040                       1348 	.org	0x40
                                   1349 
    00000040s00r00s00r00s00r00     1350 	.word	a00,a10,a20		;s00r00s00r00s00r00
    00000046s00r00s00r00           1351 	.word	AreaB,OVR		;s00r00s00r00
                                   1352 
    0000004A                       1353 abcdabcd::				; global symbol
                                   1354 
                                   1355 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 39
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Macro Processor Tests

                                   1357 	.sbttl	Macro Processor Tests
                                   1358 
                                   1361 
                                   1362 	.radix	X
                                   1363 
                                   1364 	;	The Macro Processor directives are:
                                   1365 	;
                                   1366 	;	.macro	arg(,arg ...)		Create a Macro Definition
                                   1367 	;	.endm				End of Macro Definition
                                   1368 	;
                                   1369 	;	.mexit				Unconditional GoTo .endm
                                   1370 	;
                                   1371 	;	.irp	arg(,arg ...)		Indefinite Repeat Block
                                   1372 	;	.irpc	acbdefg			Indefinite Repeat on Characters
                                   1373 	;	.rept	arg			Repeat Code Block arg Times
                                   1374 	;
                                   1375 	;	.mdelete  arg(,arg ...)		Delete Macro Definitions
                                   1376 	;
                                   1377 	;	.nchr	arg			Number of Characters in String
                                   1378 	;	.narg	sym			Return Number of args in .macro call
                                   1379 	;	.ntyp	typ,symbol		Return Symbol Type - (ABS = 0, REL = 1)
                                   1380 	;	.nval	val,symbol		Return Value of Symbol (As Absolute Value)
                                   1381 	;
                                   1382 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 40
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Macro Creation

                                   1384 	.sbttl	Macro Creation
                                   1385 
                                   1386 	; Macro definition with the
                                   1387 	; name 'seta' and two arguments.
                                   1388 	;
                                   1389 	.macro	seta	A,B	; Define macro seta
                                   1390 	  .byte	A,B		; 01 6A
                                   1391 	.endm
                                   1392 
    00000000                       1393 	.org	0
                                   1394 	seta	0x01, 'j
    00000000 01 6A                 1390 	  .byte	0x01,'j		; 01 6A
                                   1395 
                                   1396 	.mdelete	seta
                                   1397 
                                   1398 
                                   1399 	; Macro definition with the
                                   1400 	; name 'setb' and a regular
                                   1401 	; argument and a dumby argument.
                                   1402 	;
                                   1403 	.macro	setb	A,?B	; Define macro setb
                                   1404 B:	  .byte	A		; 02
                                   1405 	  .word	B		;s00r00
                                   1406 	.endm
                                   1407 
    00000000                       1408 	.org	0
                                   1409 	setb	0x02, K		; Use label K
    00000000 02                    1404 K:	  .byte	0x02		; 02
    00000001s00r00                 1405 	  .word	K		;s00r00
                                   1410 
                                   1411 	.mdelete	setb
                                   1412 
                                   1413 
                                   1414 	.macro	setb	A,?B	; Define macro setb
                                   1415 B:	  .byte	A		; 03
                                   1416 	  .word	B		;s00r03
                                   1417 	.endm
                                   1418 
                                   1419 	setb	0x03		; Create a local symbol
    00000003 03                    1415 10000$:	  .byte	0x03		; 03
    00000004s00r03                 1416 	  .word	10000$		;s00r03
                                   1420 
                                   1421 	.mdelete	setb
                                   1422 
                                   1423 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 41
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Macro Creation

                                   1425 	; Macro definition with the
                                   1426 	; name 'setc' and two regular
                                   1427 	; arguments with concatenation.
                                   1428 	;
                                   1429 	.macro setc	A,B	; Define macro setc
                                   1430 A'B:	  .byte	0x04		; 04
                                   1431 	  .word	A'B		;s00r00
                                   1432 	.endm
                                   1433 
    00000000                       1434 	.org	0
                                   1435 	setc	J, K
    00000000 04                    1430 JK:	  .byte	0x04		; 04
    00000001s00r00                 1431 	  .word	JK		;s00r00
                                   1436 
                                   1437 	.mdelete	.setc
                                   1438 
                                   1439 
                                   1440 	; Macro definition with the
                                   1441 	; name 'setd' and three regular
                                   1442 	; arguments with concatenation.
                                   1443 	;
                                   1444 	.macro setd	A,B,C	; Define macro setd
                                   1445 A'B:	  .byte	0x05		; 05
                                   1446 	  .word	A'B		;s00r00
                                   1447 A'C:	  .byte	0x06		; 06
                                   1448 	  .word	A'C		;s00r03
                                   1449 B'C:	  .byte	0x07		; 07
                                   1450 	  .word	B'C		;s00r06
                                   1451 A''B''C:  .byte	0x08		; 08
                                   1452 	  .word	A''B''C		;s00r09
                                   1453 	.endm
                                   1454 
    00000000                       1455 	.org	0
                                   1456 	setd	X, Y, Z
    00000000 05                    1445 XY:	  .byte	0x05		; 05
    00000001s00r00                 1446 	  .word	XY		;s00r00
    00000003 06                    1447 XZ:	  .byte	0x06		; 06
    00000004s00r03                 1448 	  .word	XZ		;s00r03
    00000006 07                    1449 YZ:	  .byte	0x07		; 07
    00000007s00r06                 1450 	  .word	YZ		;s00r06
    00000009 08                    1451 XYZ:  .byte	0x08		; 08
    0000000As00r09                 1452 	  .word	XYZ		;s00r09
                                   1457 
                                   1458 	.mdelete	.setd
                                   1459 
                                   1460 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 42
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Macro Creation

                                   1462 	; Macro definition with the
                                   1463 	; name 'sete' and two regular
                                   1464 	; arguments.  The second
                                   1465 	; argument is converted to
                                   1466 	; a numerical value.
                                   1467 	.macro	sete	A,B	; Define macro sete
                                   1468 	 ...A = A
                                   1469 	 ...B = B
                                   1470 	 .byte	A,B
                                   1471 	 A = A + 1
                                   1472 	.endm
                                   1473 
                         00000000  1474 	qxd = 0
                                   1475 	sete	qxd, \(qxd+1)
                         00000000  1468 	 ...A = qxd
                         00000001  1469 	 ...B = 1
    0000000C 00 01                 1470 	 .byte	qxd,1
                         00000001  1471 	 qxd = qxd + 1
                                   1476 	.iif	ne,...A-0	.error	1	; ...A != 0
                                   1477 	.iif	ne,...B-1	.error	1	; ...B != 1
                                   1478 	sete	qxd, \(qxd+2)
                         00000001  1468 	 ...A = qxd
                         00000003  1469 	 ...B = 3
    0000000E 01 03                 1470 	 .byte	qxd,3
                         00000002  1471 	 qxd = qxd + 1
                                   1479 	.iif	ne,...A-1	.error	1	; ...A != 1
                                   1480 	.iif	ne,...B-3	.error	1	; ...B != 3
                                   1481 	sete	qxd, \(qxd+3)
                         00000002  1468 	 ...A = qxd
                         00000005  1469 	 ...B = 5
    00000010 02 05                 1470 	 .byte	qxd,5
                         00000003  1471 	 qxd = qxd + 1
                                   1482 	.iif	ne,...A-2	.error	1	; ...A != 2
                                   1483 	.iif	ne,...B-5	.error	1	; ...B != 5
                                   1484 
                                   1485 	.mdelete	.sete
                                   1486 
                                   1487 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 43
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Macro Creation

                                   1489 	; Macro definition with
                                   1490 	; conditional exits.
                                   1491 	.macro	cond	A,B,C	; Define macro cond
                                   1492 	...A = 0
                                   1493 	.if	nb,^!A!
                                   1494 	  .if	nb,^!B!
                                   1495 	    .if	nb,^!C!
                                   1496 	      ...A = 3
                                   1497 	      .mexit	; C
                                   1498 	    .endif
                                   1499 	    ...A = 2
                                   1500 	    .mexit	; B
                                   1501 	  .endif
                                   1502 	  ...A = 1
                                   1503 	  .mexit	; A
                                   1504 	.endif
                                   1505 	.endm
                                   1506 
                                   1507 	cond
                         00000000  1492 	...A = 0
                         00000000  1493 	.if	nb,^!!
                                   1494 	  .if	nb,^!!
                                   1495 	    .if	nb,^!!
                                   1496 	      ...A = 3
                                   1497 	      .mexit	; C
                                   1498 	    .endif
                                   1499 	    ...A = 2
                                   1500 	    .mexit	; B
                                   1501 	  .endif
                                   1502 	  ...A = 1
                                   1503 	  .mexit	; A
                                   1504 	.endif
                                   1508 	.iif	ne,...A-0	.error	1	; ...A != 0
                                   1509 	cond	1
                         00000000  1492 	...A = 0
                         00000001  1493 	.if	nb,^!1!
                         00000000  1494 	  .if	nb,^!!
                                   1495 	    .if	nb,^!!
                                   1496 	      ...A = 3
                                   1497 	      .mexit	; C
                                   1498 	    .endif
                                   1499 	    ...A = 2
                                   1500 	    .mexit	; B
                                   1501 	  .endif
                         00000001  1502 	  ...A = 1
                                   1503 	  .mexit	; A
                                   1510 	.iif	ne,...A-1	.error	1	; ...A != 1
                                   1511 	cond	1,2
                         00000000  1492 	...A = 0
                         00000001  1493 	.if	nb,^!1!
                         00000001  1494 	  .if	nb,^!2!
                         00000000  1495 	    .if	nb,^!!
                                   1496 	      ...A = 3
                                   1497 	      .mexit	; C
                                   1498 	    .endif
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 44
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Macro Creation

                         00000002  1499 	    ...A = 2
                                   1500 	    .mexit	; B
                                   1512 	.iif	ne,...A-2	.error	1	; ...A != 2
                                   1513 	cond	1,2,3
                         00000000  1492 	...A = 0
                         00000001  1493 	.if	nb,^!1!
                         00000001  1494 	  .if	nb,^!2!
                         00000001  1495 	    .if	nb,^!3!
                         00000003  1496 	      ...A = 3
                                   1497 	      .mexit	; C
                                   1514 	.iif	ne,...A-3	.error	1	; ...A != 3
                                   1515 
                                   1516 	.mdelete	cond
                                   1517 
                                   1518 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 45
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Repeat Macro

                                   1520 	.sbttl	Repeat Macro
                                   1521 	; Repeat Macro Definition.
                                   1522 
                                   1523 	.macro	RMD	J,K
                                   1524 	 .byte	...cnt	J'K
                                   1525 	.endm
                                   1526 
                         00000000  1527 	...cnt = 0
                                   1528 	.rept	0d5
                                   1529 	 RMD	^!; 0!,\...cnt
                                   1530 	 ...cnt = ...cnt + 1
                                   1531 	.endm
                                   1529 	 RMD	^!; 0!,\...cnt
    00000012 00                    1524 	 .byte	...cnt	; 00
                         00000001  1530 	 ...cnt = ...cnt + 1
                                   1529 	 RMD	^!; 0!,\...cnt
    00000013 01                    1524 	 .byte	...cnt	; 01
                         00000002  1530 	 ...cnt = ...cnt + 1
                                   1529 	 RMD	^!; 0!,\...cnt
    00000014 02                    1524 	 .byte	...cnt	; 02
                         00000003  1530 	 ...cnt = ...cnt + 1
                                   1529 	 RMD	^!; 0!,\...cnt
    00000015 03                    1524 	 .byte	...cnt	; 03
                         00000004  1530 	 ...cnt = ...cnt + 1
                                   1529 	 RMD	^!; 0!,\...cnt
    00000016 04                    1524 	 .byte	...cnt	; 04
                         00000005  1530 	 ...cnt = ...cnt + 1
                                   1532 	.iif	ne,...cnt - 5	.error	1	; ...cnt != 5
                                   1533 
                                   1534 
                         00000000  1535 	...cnt = 0
                                   1536 	.rept	0d10
                                   1537 	 RMD	^!; 0!,\...cnt
                                   1538 	 ...cnt = ...cnt + 1
                                   1539 	 .iif	eq,...cnt - 5	.mexit
                                   1540 	 .iif	gt,...cnt - 5	.error	1	; ...cnt >  5
                                   1541 	.endm
                                   1537 	 RMD	^!; 0!,\...cnt
    00000017 00                    1524 	 .byte	...cnt	; 00
                         00000001  1538 	 ...cnt = ...cnt + 1
                                   1539 	 .iif	eq,...cnt - 5	.mexit
                                   1540 	 .iif	gt,...cnt - 5	.error	1	; ...cnt >  5
                                   1537 	 RMD	^!; 0!,\...cnt
    00000018 01                    1524 	 .byte	...cnt	; 01
                         00000002  1538 	 ...cnt = ...cnt + 1
                                   1539 	 .iif	eq,...cnt - 5	.mexit
                                   1540 	 .iif	gt,...cnt - 5	.error	1	; ...cnt >  5
                                   1537 	 RMD	^!; 0!,\...cnt
    00000019 02                    1524 	 .byte	...cnt	; 02
                         00000003  1538 	 ...cnt = ...cnt + 1
                                   1539 	 .iif	eq,...cnt - 5	.mexit
                                   1540 	 .iif	gt,...cnt - 5	.error	1	; ...cnt >  5
                                   1537 	 RMD	^!; 0!,\...cnt
    0000001A 03                    1524 	 .byte	...cnt	; 03
                         00000004  1538 	 ...cnt = ...cnt + 1
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 46
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Repeat Macro

                                   1539 	 .iif	eq,...cnt - 5	.mexit
                                   1540 	 .iif	gt,...cnt - 5	.error	1	; ...cnt >  5
                                   1537 	 RMD	^!; 0!,\...cnt
    0000001B 04                    1524 	 .byte	...cnt	; 04
                         00000005  1538 	 ...cnt = ...cnt + 1
                                   1539 	 .iif	eq,...cnt - 5	.mexit
                                   1542 	.iif	ne,...cnt - 5	.error	1	; ...cnt != 5
                                   1543 
                                   1544 	.mdelete	RMD
                                   1545 
                                   1546 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 47
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Indefinite Repeat Macro

                                   1548 	.sbttl	Indefinite Repeat Macro
                                   1549 
                         0000000C  1550 	...val = 0d12
                                   1551 	.irp	sym	A,B,\...val
                                   1552 	 .globl	val'sym
                                   1553 	 .word	val'sym		;s00r00
                                   1554 	.endm
                                   1552 	 .globl	valA
    0000001Cs00r00                 1553 	 .word	valA		;s00r00
                                   1552 	 .globl	valB
    0000001Es00r00                 1553 	 .word	valB		;s00r00
                                   1552 	 .globl	valC
    00000020s00r00                 1553 	 .word	valC		;s00r00
                                   1555 
                                   1556 
                                   1557 	.irp	sym	^!.word	0x1234		; 12 34!,	^!.byte	0xFF		; FF!
                                   1558 	 sym
                                   1559 	.endm
    00000022 12 34                 1558 	 .word	0x1234		; 12 34
    00000024 FF                    1558 	 .byte	0xFF		; FF
                                   1560 
                                   1561 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 48
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Indefinite Repeat on Character

                                   1563 	.sbttl	Indefinite Repeat on Character
                                   1564 	;
                                   1565 	; Note that these macros are used to create
                                   1566 	; comments.  The comment delimiter ';' always
                                   1567 	; terminates the macro substitution scan when
                                   1568 	; found in a macro call.
                                   1569 	;(even if the ';' is within a delimited string !!!)
                                   1570 	;
                                   1571 	; The ';' character is thus placed in the last
                                   1572 	; argument of the macro call.
                                   1573 	;
                                   1574 
                                   1575 	.macro	irpcm1	I	J,K,L,M
                                   1576 	 .byte	''I,''I - '0	M'J'K'L
                                   1577 	.endm
                                   1578 
                                   1579 	.macro	irpcm2	I	J,K
                                   1580 	 .asciz	"'I"			K'J' 00
                                   1581 	.endm
                                   1582 
                                   1583 	.irpc	sym	0123456789abcdef
                                   1584 	 ...sym = ''sym
                                   1585 	 .if	ge,''sym - '0
                                   1586 	  .if	le,''sym - '9
                                   1587 	   irpcm1	sym	\''sym, ^! 0!, \(''sym-'0), ^!; !
                                   1588 	  .else
                                   1589 	   irpcm2	sym	\''sym, ^!; !
                                   1590 	  .endif
                                   1591 	 .endif
                                   1592 	.endm
                         00000030  1584 	 ...sym = '0
                         00000001  1585 	 .if	ge,'0 - '0
                         00000001  1586 	  .if	le,'0 - '9
                                   1587 	   irpcm1	0	\'0, ^! 0!, \('0-'0), ^!; !
    00000025 30 00                 1576 	 .byte	'0,'0 - '0	; 30 00
                         00000000  1588 	  .else
                                   1589 	   irpcm2	0	\'0, ^!; !
                                   1590 	  .endif
                                   1591 	 .endif
                         00000031  1584 	 ...sym = '1
                         00000001  1585 	 .if	ge,'1 - '0
                         00000001  1586 	  .if	le,'1 - '9
                                   1587 	   irpcm1	1	\'1, ^! 0!, \('1-'0), ^!; !
    00000027 31 01                 1576 	 .byte	'1,'1 - '0	; 31 01
                         00000000  1588 	  .else
                                   1589 	   irpcm2	1	\'1, ^!; !
                                   1590 	  .endif
                                   1591 	 .endif
                         00000032  1584 	 ...sym = '2
                         00000001  1585 	 .if	ge,'2 - '0
                         00000001  1586 	  .if	le,'2 - '9
                                   1587 	   irpcm1	2	\'2, ^! 0!, \('2-'0), ^!; !
    00000029 32 02                 1576 	 .byte	'2,'2 - '0	; 32 02
                         00000000  1588 	  .else
                                   1589 	   irpcm2	2	\'2, ^!; !
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 49
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Indefinite Repeat on Character

                                   1590 	  .endif
                                   1591 	 .endif
                         00000033  1584 	 ...sym = '3
                         00000001  1585 	 .if	ge,'3 - '0
                         00000001  1586 	  .if	le,'3 - '9
                                   1587 	   irpcm1	3	\'3, ^! 0!, \('3-'0), ^!; !
    0000002B 33 03                 1576 	 .byte	'3,'3 - '0	; 33 03
                         00000000  1588 	  .else
                                   1589 	   irpcm2	3	\'3, ^!; !
                                   1590 	  .endif
                                   1591 	 .endif
                         00000034  1584 	 ...sym = '4
                         00000001  1585 	 .if	ge,'4 - '0
                         00000001  1586 	  .if	le,'4 - '9
                                   1587 	   irpcm1	4	\'4, ^! 0!, \('4-'0), ^!; !
    0000002D 34 04                 1576 	 .byte	'4,'4 - '0	; 34 04
                         00000000  1588 	  .else
                                   1589 	   irpcm2	4	\'4, ^!; !
                                   1590 	  .endif
                                   1591 	 .endif
                         00000035  1584 	 ...sym = '5
                         00000001  1585 	 .if	ge,'5 - '0
                         00000001  1586 	  .if	le,'5 - '9
                                   1587 	   irpcm1	5	\'5, ^! 0!, \('5-'0), ^!; !
    0000002F 35 05                 1576 	 .byte	'5,'5 - '0	; 35 05
                         00000000  1588 	  .else
                                   1589 	   irpcm2	5	\'5, ^!; !
                                   1590 	  .endif
                                   1591 	 .endif
                         00000036  1584 	 ...sym = '6
                         00000001  1585 	 .if	ge,'6 - '0
                         00000001  1586 	  .if	le,'6 - '9
                                   1587 	   irpcm1	6	\'6, ^! 0!, \('6-'0), ^!; !
    00000031 36 06                 1576 	 .byte	'6,'6 - '0	; 36 06
                         00000000  1588 	  .else
                                   1589 	   irpcm2	6	\'6, ^!; !
                                   1590 	  .endif
                                   1591 	 .endif
                         00000037  1584 	 ...sym = '7
                         00000001  1585 	 .if	ge,'7 - '0
                         00000001  1586 	  .if	le,'7 - '9
                                   1587 	   irpcm1	7	\'7, ^! 0!, \('7-'0), ^!; !
    00000033 37 07                 1576 	 .byte	'7,'7 - '0	; 37 07
                         00000000  1588 	  .else
                                   1589 	   irpcm2	7	\'7, ^!; !
                                   1590 	  .endif
                                   1591 	 .endif
                         00000038  1584 	 ...sym = '8
                         00000001  1585 	 .if	ge,'8 - '0
                         00000001  1586 	  .if	le,'8 - '9
                                   1587 	   irpcm1	8	\'8, ^! 0!, \('8-'0), ^!; !
    00000035 38 08                 1576 	 .byte	'8,'8 - '0	; 38 08
                         00000000  1588 	  .else
                                   1589 	   irpcm2	8	\'8, ^!; !
                                   1590 	  .endif
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 50
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Indefinite Repeat on Character

                                   1591 	 .endif
                         00000039  1584 	 ...sym = '9
                         00000001  1585 	 .if	ge,'9 - '0
                         00000001  1586 	  .if	le,'9 - '9
                                   1587 	   irpcm1	9	\'9, ^! 0!, \('9-'0), ^!; !
    00000037 39 09                 1576 	 .byte	'9,'9 - '0	; 39 09
                         00000000  1588 	  .else
                                   1589 	   irpcm2	9	\'9, ^!; !
                                   1590 	  .endif
                                   1591 	 .endif
                         00000061  1584 	 ...sym = 'a
                         00000001  1585 	 .if	ge,'a - '0
                         00000000  1586 	  .if	le,'a - '9
                                   1587 	   irpcm1	a	\'a, ^! 0!, \('a-'0), ^!; !
                         00000001  1588 	  .else
                                   1589 	   irpcm2	a	\'a, ^!; !
    00000039 61 00                 1580 	 .asciz	"a"			; 61 00
                                   1590 	  .endif
                                   1591 	 .endif
                         00000062  1584 	 ...sym = 'b
                         00000001  1585 	 .if	ge,'b - '0
                         00000000  1586 	  .if	le,'b - '9
                                   1587 	   irpcm1	b	\'b, ^! 0!, \('b-'0), ^!; !
                         00000001  1588 	  .else
                                   1589 	   irpcm2	b	\'b, ^!; !
    0000003B 62 00                 1580 	 .asciz	"b"			; 62 00
                                   1590 	  .endif
                                   1591 	 .endif
                         00000063  1584 	 ...sym = 'c
                         00000001  1585 	 .if	ge,'c - '0
                         00000000  1586 	  .if	le,'c - '9
                                   1587 	   irpcm1	c	\'c, ^! 0!, \('c-'0), ^!; !
                         00000001  1588 	  .else
                                   1589 	   irpcm2	c	\'c, ^!; !
    0000003D 63 00                 1580 	 .asciz	"c"			; 63 00
                                   1590 	  .endif
                                   1591 	 .endif
                         00000064  1584 	 ...sym = 'd
                         00000001  1585 	 .if	ge,'d - '0
                         00000000  1586 	  .if	le,'d - '9
                                   1587 	   irpcm1	d	\'d, ^! 0!, \('d-'0), ^!; !
                         00000001  1588 	  .else
                                   1589 	   irpcm2	d	\'d, ^!; !
    0000003F 64 00                 1580 	 .asciz	"d"			; 64 00
                                   1590 	  .endif
                                   1591 	 .endif
                         00000065  1584 	 ...sym = 'e
                         00000001  1585 	 .if	ge,'e - '0
                         00000000  1586 	  .if	le,'e - '9
                                   1587 	   irpcm1	e	\'e, ^! 0!, \('e-'0), ^!; !
                         00000001  1588 	  .else
                                   1589 	   irpcm2	e	\'e, ^!; !
    00000041 65 00                 1580 	 .asciz	"e"			; 65 00
                                   1590 	  .endif
                                   1591 	 .endif
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 51
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Indefinite Repeat on Character

                         00000066  1584 	 ...sym = 'f
                         00000001  1585 	 .if	ge,'f - '0
                         00000000  1586 	  .if	le,'f - '9
                                   1587 	   irpcm1	f	\'f, ^! 0!, \('f-'0), ^!; !
                         00000001  1588 	  .else
                                   1589 	   irpcm2	f	\'f, ^!; !
    00000043 66 00                 1580 	 .asciz	"f"			; 66 00
                                   1590 	  .endif
                                   1591 	 .endif
                                   1593 
                                   1594 	.mdelete	irpcm1, irpcm2
                                   1595 
                                   1596 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 52
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Macro Definitions and User Labels

                                   1598 	.sbttl	Macro Definitions and User Labels
                                   1599 
                                   1600 	.macro	DUL	A	B,C
                                   1601 	 .byte	A	C'B
                                   1602 	.endm
                                   1603 
                                   1604 	.macro	LESS	I,J	; Define macro LESS
                                   1605 	  .iif	lt,(I - J)	DUL	I	\I, ^!; 0!
                                   1606 	  .iif	gt,(I - J)	DUL	J	\J, ^!; 0!
                                   1607 	  .iif	eq,(I - J)	DUL	0	\0, ^!; 0!
                                   1608 	.endm
                                   1609 
                         00000001  1610 	sym1	=	1
                         00000002  1611 	sym2	=	2
                                   1612 
    00000000                       1613 	.org	0
                                   1614 				;LESS is defined as a label
    00000000 02                    1615 LESS:	.byte	2	        ; 02
                                   1616 	  ;
                                   1617 	  ;
                                   1618 	  ;			;LESS is considered to be a label
    00000001s00r00                 1619 	.word	LESS		;s00r00
                                   1620 	  ;
                                   1621 	  ;
                                   1622 	  ;
                                   1623 	LESS	sym1,sym2	;LESS is a macro call
                                   1605 	  .iif	lt,(sym1 - sym2)	DUL	sym1	\sym1, ^!; 0!
    00000003 01                    1601 	 .byte	sym1	; 01
                                   1606 	  .iif	gt,(sym1 - sym2)	DUL	sym2	\sym2, ^!; 0!
                                   1607 	  .iif	eq,(sym1 - sym2)	DUL	0	\0, ^!; 0!
                                   1624 
                                   1625 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 53
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Immediate Conditional Macro Execution

                                   1627 	.sbttl	Immediate Conditional Macro Execution
                                   1628 
                         00000000  1629 	.if	ne,0
                                   1630 	  .byte	0xE0
                                   1631 	  .iif    f	LESS	sym1,sym2
                                   1605 	  .iif	lt,(sym1 - sym2)	DUL	sym1	\sym1, ^!; 0!
    00000004 01                    1601 	 .byte	sym1	; 01
                                   1606 	  .iif	gt,(sym1 - sym2)	DUL	sym2	\sym2, ^!; 0!
                                   1607 	  .iif	eq,(sym1 - sym2)	DUL	0	\0, ^!; 0!
                                   1632 	  .byte 0xE1
                                   1633 	  .iif	  t	LESS	sym2,sym1
                                   1634 	  .byte	0xE2
                                   1635 	  .iif    tf	LESS	sym1,sym1
                                   1605 	  .iif	lt,(sym1 - sym1)	DUL	sym1	\sym1, ^!; 0!
                                   1606 	  .iif	gt,(sym1 - sym1)	DUL	sym1	\sym1, ^!; 0!
                                   1607 	  .iif	eq,(sym1 - sym1)	DUL	0	\0, ^!; 0!
    00000005 00                    1601 	 .byte	0	; 00
                                   1636 	  .byte	0xE3
                                   1637 	.endif
                                   1638 
                         00000001  1639 	.if	eq,0
    00000006 F0                    1640 	  .byte	0xF0
                                   1641 	  .iif	  f	LESS	sym1,sym2
    00000007 F1                    1642 	  .byte	0xF1
                                   1643 	  .iif    t	LESS	sym2,sym1
                                   1605 	  .iif	lt,(sym2 - sym1)	DUL	sym2	\sym2, ^!; 0!
                                   1606 	  .iif	gt,(sym2 - sym1)	DUL	sym1	\sym1, ^!; 0!
    00000008 01                    1601 	 .byte	sym1	; 01
                                   1607 	  .iif	eq,(sym2 - sym1)	DUL	0	\0, ^!; 0!
    00000009 F2                    1644 	  .byte 0xF2
                                   1645 	  .iif    tf	LESS	sym2,sym2
                                   1605 	  .iif	lt,(sym2 - sym2)	DUL	sym2	\sym2, ^!; 0!
                                   1606 	  .iif	gt,(sym2 - sym2)	DUL	sym2	\sym2, ^!; 0!
                                   1607 	  .iif	eq,(sym2 - sym2)	DUL	0	\0, ^!; 0!
    0000000A 00                    1601 	 .byte	0	; 00
    0000000B F3                    1646 	  .byte	0xF3
                                   1647 	.endif
                                   1648 
                                   1649 	.mdelete	DUL, LESS
                                   1650 
                                   1651 
                                   1652 	.sbttl	Assembler Symbol Table Output
                                   1653 
                         00000000  1654 .if 0
                                   1655 
                                   1656  Listing of Symbol Table
                                   1657 
                                   1658        assembled by:
                                   1659                 asxxxx -gloxff out hilo.asm a32bit.asm asmt4bhi.asm
                                   1660 
                                   1661 Symbol Table
                                   1662 
                                   1663     ...A           =    00000003 G   |     ...B           =    00000005 G
                                   1664     ...cnt         =    00000005 G   |     ...sym         =    00000066 G
                                   1665     ...val         =    0000000C G   |     .__.$$$.       =    00002711 L
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 54
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Assembler Symbol Table Output

                                   1666     .__.ABS.       =    00000000 G   |     .__.CPU.       =    00000000 L
                                   1667     .__.H$L.       =    00000001 L   |     AreaB               ******** GX
                                   1668   3 JK                  00000000 GR  |   3 K                   00000000 GR
                                   1669   3 LESS                00000000 GR  |     OVR                 ******** GX
                                   1670   3 XY                  00000000 GR  |   3 XYZ                 00000009 GR
                                   1671   3 XZ                  00000003 GR  |   3 YZ                  00000006 GR
                                   1672   2 a00                 00000000 GR  |     a10                 ******** GX
                                   1673     a20                 ******** GX  |   3 abcdabcd            0000004A GR
                                   1674   1 bndry_1             00000000 GR  |   1 bndry_2             00000000 GR
                                   1675   1 bndry_3             00000000 GR  |   1 bndry_4             00000000 GR
                                   1676   1 bndry_5             00000000 GR  |   1 bndry_6             00000000 GR
                                   1677   1 byte4               00000098 GR  |     cnstnt0        =    0000ABCD G
                                   1678     cnstnt1        =    00001234 G   |     cnstnt2        =    00005678 G
                                   1679   1 code0               00000082 GR  |     extern              ******** GX
                                   1680   1 lclsym0             00000000 GR  |   1 lclsym1             0000003C GR
                                   1681     m              =    00000000 G   |     n              =    00000001 G
                                   1682     n0x00          =    00000000 G   |     n0x01          =    00000001 G
                                   1683     n0x10          =    00000010 G   |     n0xeeff        =    0000EEFF G
                                   1684     n0xff          =    000000FF G   |     ofsbyte        =    00000014 G
                                   1685     ofsword        =    0000000A G   |     qxd            =    00000003 G
                                   1686     sym1           =    00000001 G   |     sym2           =    00000002 G
                                   1687     valA                ******** GX  |     valB                ******** GX
                                   1688     valC                ******** GX  |   1 word                00000090 GR
                                   1689 
                                   1690 
                                   1691 Area Table
                                   1692 
                                   1693 [_CSEG]
                                   1694    0 _CODE            size        0   flags C080
                                   1695 [_DSEG]
                                   1696    1 _DATA            size       86   flags CDCC
                                   1697    2 AreaA            size       24   flags C5C4
                                   1698    3 AreaB            size        C   flags CDCC
                                   1699 
                                   1700 .endif
                                   1701 
                                   1702 
ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 55
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Symbol Table

    ...A           =    00000003 G   |     ...B           =    00000005 G
    ...cnt         =    00000005 G   |     ...sym         =    00000066 G
    ...val         =    0000000C G   |     .__.$$$.       =    00002711 L
    .__.ABS.       =    00000000 G   |     .__.CPU.       =    00000000 L
    .__.H$L.       =    00000001 L   |     AreaB               ******** GX
  9 JK                  00000000 GR  |   9 K                   00000000 GR
  9 LESS                00000000 GR  |     OVR                 ******** GX
  9 XY                  00000000 GR  |   9 XYZ                 00000009 GR
  9 XZ                  00000003 GR  |   9 YZ                  00000006 GR
  8 a00                 00000000 GR  |     a10                 ******** GX
    a20                 ******** GX  |   9 abcdabcd            0000004A GR
  2 bndry_1             00000000 GR  |   3 bndry_2             00000000 GR
  4 bndry_3             00000000 GR  |   5 bndry_4             00000000 GR
  6 bndry_5             00000000 GR  |   7 bndry_6             00000000 GR
  1 byte4               00000098 GR  |     cnstnt0        =    0000ABCD G
    cnstnt1        =    00001234 G   |     cnstnt2        =    00005678 G
  1 code0               00000082 GR  |     extern              ******** GX
  1 lclsym0             00000000 GR  |   1 lclsym1             0000003C GR
    m              =    00000000 G   |     n              =    00000001 G
    n0x00          =    00000000 G   |     n0x01          =    00000001 G
    n0x10          =    00000010 G   |     n0xeeff        =    0000EEFF G
    n0xff          =    000000FF G   |     ofsbyte        =    00000014 G
    ofsword        =    0000000A G   |     qxd            =    00000003 G
    sym1           =    00000001 G   |     sym2           =    00000002 G
    valA                ******** GX  |     valB                ******** GX
    valC                ******** GX  |   1 word                00000090 GR

ASxxxx Assembler V05.50  (ASxxxx Test Assembler)                       Page 56
Hexadecimal [32-Bits]                                 Sun Aug 27 19:25:10 2023
Machine Independent Assembler Test
Area Table

[_CSEG]
   0 _CODE            size        0   flags C080
   2 bndry_1          size       12   flags 4D4C
   3 bndry_2          size        2   flags 4D4C
   4 bndry_3          size      402   flags 4D4C
   5 bndry_4          size        2   flags 4D4C
   6 bndry_5          size       23   flags 4D4C
   7 bndry_6          size      602   flags 4D4C
[_DSEG]
   1 _DATA            size       86   flags CDCC
   8 AreaA            size       24   flags C5C4
   9 AreaB            size        C   flags CDCC

